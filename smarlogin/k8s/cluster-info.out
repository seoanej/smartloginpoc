{
    "kind": "NodeList",
    "apiVersion": "v1",
    "metadata": {
        "selfLink": "/api/v1/nodes",
        "resourceVersion": "958"
    },
    "items": [
        {
            "metadata": {
                "name": "minikube",
                "selfLink": "/api/v1/nodes/minikube",
                "uid": "82eb58ef-87ae-4277-a47b-df643d8aee56",
                "resourceVersion": "831",
                "creationTimestamp": "2020-10-12T14:38:15Z",
                "labels": {
                    "beta.kubernetes.io/arch": "amd64",
                    "beta.kubernetes.io/os": "linux",
                    "kubernetes.io/arch": "amd64",
                    "kubernetes.io/hostname": "minikube",
                    "kubernetes.io/os": "linux",
                    "minikube.k8s.io/commit": "1fd1f67f338cbab4b3e5a6e4c71c551f522ca138-dirty",
                    "minikube.k8s.io/name": "minikube",
                    "minikube.k8s.io/updated_at": "2020_10_12T16_38_19_0700",
                    "minikube.k8s.io/version": "v1.13.1",
                    "node-role.kubernetes.io/master": ""
                },
                "annotations": {
                    "kubeadm.alpha.kubernetes.io/cri-socket": "/var/run/dockershim.sock",
                    "node.alpha.kubernetes.io/ttl": "0",
                    "volumes.kubernetes.io/controller-managed-attach-detach": "true"
                },
                "managedFields": [
                    {
                        "manager": "kubeadm",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-10-12T14:38:18Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    "f:kubeadm.alpha.kubernetes.io/cri-socket": {}
                                },
                                "f:labels": {
                                    "f:node-role.kubernetes.io/master": {}
                                }
                            }
                        }
                    },
                    {
                        "manager": "kubectl-label",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-10-12T14:38:20Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:labels": {
                                    "f:minikube.k8s.io/commit": {},
                                    "f:minikube.k8s.io/name": {},
                                    "f:minikube.k8s.io/updated_at": {},
                                    "f:minikube.k8s.io/version": {}
                                }
                            }
                        }
                    },
                    {
                        "manager": "kube-controller-manager",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-10-12T14:38:25Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    "f:node.alpha.kubernetes.io/ttl": {}
                                },
                                "f:labels": {
                                    "f:beta.kubernetes.io/arch": {},
                                    "f:beta.kubernetes.io/os": {}
                                }
                            }
                        }
                    },
                    {
                        "manager": "kubelet",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-10-12T14:48:38Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    ".": {},
                                    "f:volumes.kubernetes.io/controller-managed-attach-detach": {}
                                },
                                "f:labels": {
                                    ".": {},
                                    "f:kubernetes.io/arch": {},
                                    "f:kubernetes.io/hostname": {},
                                    "f:kubernetes.io/os": {}
                                }
                            },
                            "f:status": {
                                "f:addresses": {
                                    ".": {},
                                    "k:{\"type\":\"Hostname\"}": {
                                        ".": {},
                                        "f:address": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"InternalIP\"}": {
                                        ".": {},
                                        "f:address": {},
                                        "f:type": {}
                                    }
                                },
                                "f:allocatable": {
                                    ".": {},
                                    "f:cpu": {},
                                    "f:ephemeral-storage": {},
                                    "f:hugepages-1Gi": {},
                                    "f:hugepages-2Mi": {},
                                    "f:memory": {},
                                    "f:pods": {}
                                },
                                "f:capacity": {
                                    ".": {},
                                    "f:cpu": {},
                                    "f:ephemeral-storage": {},
                                    "f:hugepages-1Gi": {},
                                    "f:hugepages-2Mi": {},
                                    "f:memory": {},
                                    "f:pods": {}
                                },
                                "f:conditions": {
                                    ".": {},
                                    "k:{\"type\":\"DiskPressure\"}": {
                                        ".": {},
                                        "f:lastHeartbeatTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"MemoryPressure\"}": {
                                        ".": {},
                                        "f:lastHeartbeatTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"PIDPressure\"}": {
                                        ".": {},
                                        "f:lastHeartbeatTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Ready\"}": {
                                        ".": {},
                                        "f:lastHeartbeatTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    }
                                },
                                "f:daemonEndpoints": {
                                    "f:kubeletEndpoint": {
                                        "f:Port": {}
                                    }
                                },
                                "f:images": {},
                                "f:nodeInfo": {
                                    "f:architecture": {},
                                    "f:bootID": {},
                                    "f:containerRuntimeVersion": {},
                                    "f:kernelVersion": {},
                                    "f:kubeProxyVersion": {},
                                    "f:kubeletVersion": {},
                                    "f:machineID": {},
                                    "f:operatingSystem": {},
                                    "f:osImage": {},
                                    "f:systemUUID": {}
                                }
                            }
                        }
                    }
                ]
            },
            "spec": {},
            "status": {
                "capacity": {
                    "cpu": "4",
                    "ephemeral-storage": "120276728Ki",
                    "hugepages-1Gi": "0",
                    "hugepages-2Mi": "0",
                    "memory": "3947692Ki",
                    "pods": "110"
                },
                "allocatable": {
                    "cpu": "4",
                    "ephemeral-storage": "120276728Ki",
                    "hugepages-1Gi": "0",
                    "hugepages-2Mi": "0",
                    "memory": "3947692Ki",
                    "pods": "110"
                },
                "conditions": [
                    {
                        "type": "MemoryPressure",
                        "status": "False",
                        "lastHeartbeatTime": "2020-10-12T14:48:38Z",
                        "lastTransitionTime": "2020-10-12T14:38:10Z",
                        "reason": "KubeletHasSufficientMemory",
                        "message": "kubelet has sufficient memory available"
                    },
                    {
                        "type": "DiskPressure",
                        "status": "False",
                        "lastHeartbeatTime": "2020-10-12T14:48:38Z",
                        "lastTransitionTime": "2020-10-12T14:38:10Z",
                        "reason": "KubeletHasNoDiskPressure",
                        "message": "kubelet has no disk pressure"
                    },
                    {
                        "type": "PIDPressure",
                        "status": "False",
                        "lastHeartbeatTime": "2020-10-12T14:48:38Z",
                        "lastTransitionTime": "2020-10-12T14:38:10Z",
                        "reason": "KubeletHasSufficientPID",
                        "message": "kubelet has sufficient PID available"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastHeartbeatTime": "2020-10-12T14:48:38Z",
                        "lastTransitionTime": "2020-10-12T14:38:36Z",
                        "reason": "KubeletReady",
                        "message": "kubelet is posting ready status"
                    }
                ],
                "addresses": [
                    {
                        "type": "InternalIP",
                        "address": "172.17.0.3"
                    },
                    {
                        "type": "Hostname",
                        "address": "minikube"
                    }
                ],
                "daemonEndpoints": {
                    "kubeletEndpoint": {
                        "Port": 10250
                    }
                },
                "nodeInfo": {
                    "machineID": "22754c1ef4d4461089e3b7d6590ce295",
                    "systemUUID": "7a376589-123c-4fe6-b230-5cf235629126",
                    "bootID": "448ae427-3564-4b30-83df-784345f931e9",
                    "kernelVersion": "5.4.0-48-generic",
                    "osImage": "Ubuntu 20.04 LTS",
                    "containerRuntimeVersion": "docker://19.3.8",
                    "kubeletVersion": "v1.19.2",
                    "kubeProxyVersion": "v1.19.2",
                    "operatingSystem": "linux",
                    "architecture": "amd64"
                },
                "images": [
                    {
                        "names": [
                            "k8s.gcr.io/etcd@sha256:4ad90a11b55313b182afc186b9876c8e891531b8db4c9bf1541953021618d0e2",
                            "k8s.gcr.io/etcd:3.4.13-0"
                        ],
                        "sizeBytes": 253392289
                    },
                    {
                        "names": [
                            "kubernetesui/dashboard@sha256:45ef224759bc50c84445f233fffae4aa3bdaec705cb5ee4bfe36d183b270b45d",
                            "kubernetesui/dashboard:v2.0.3"
                        ],
                        "sizeBytes": 224634157
                    },
                    {
                        "names": [
                            "k8s.gcr.io/kube-apiserver@sha256:fc905eab708c6abbdf0ef0d47667592b948fea3adf31d71b19b5205340d00011",
                            "k8s.gcr.io/kube-apiserver:v1.19.2"
                        ],
                        "sizeBytes": 118778218
                    },
                    {
                        "names": [
                            "k8s.gcr.io/kube-proxy@sha256:fa7c9d19680704e246873eb600c02fa95167d5c58e56d56ba9ed30b7c4150ac1",
                            "k8s.gcr.io/kube-proxy:v1.19.2"
                        ],
                        "sizeBytes": 117686573
                    },
                    {
                        "names": [
                            "k8s.gcr.io/kube-controller-manager@sha256:c94b98d9f79bdfe33010c313891d99ed50858d6f04ceef865e7904c338dad913",
                            "k8s.gcr.io/kube-controller-manager:v1.19.2"
                        ],
                        "sizeBytes": 110778730
                    },
                    {
                        "names": [
                            "k8s.gcr.io/kube-scheduler@sha256:bb058c7394fad4d968d366b8b372698a1144a1c3c6de52cdf46ff050ccfd31ff",
                            "k8s.gcr.io/kube-scheduler:v1.19.2"
                        ],
                        "sizeBytes": 45656426
                    },
                    {
                        "names": [
                            "k8s.gcr.io/coredns@sha256:73ca82b4ce829766d4f1f10947c3a338888f876fbed0540dc849c89ff256e90c",
                            "k8s.gcr.io/coredns:1.7.0"
                        ],
                        "sizeBytes": 45227747
                    },
                    {
                        "names": [
                            "kubernetesui/metrics-scraper@sha256:555981a24f184420f3be0c79d4efb6c948a85cfce84034f85a563f4151a81cbf",
                            "kubernetesui/metrics-scraper:v1.0.4"
                        ],
                        "sizeBytes": 36937728
                    },
                    {
                        "names": [
                            "gcr.io/k8s-minikube/storage-provisioner@sha256:5d8c9e69200846ff740bca872d681d2a736014386e4006fd26c4bf24ef7813ec",
                            "gcr.io/k8s-minikube/storage-provisioner:v3"
                        ],
                        "sizeBytes": 29667328
                    },
                    {
                        "names": [
                            "k8s.gcr.io/pause@sha256:927d98197ec1141a368550822d18fa1c60bdae27b78b0c004f705f548c07814f",
                            "k8s.gcr.io/pause:3.2"
                        ],
                        "sizeBytes": 682696
                    }
                ]
            }
        }
    ]
}
{
    "kind": "EventList",
    "apiVersion": "v1",
    "metadata": {
        "selfLink": "/api/v1/namespaces/kube-system/events",
        "resourceVersion": "958"
    },
    "items": [
        {
            "metadata": {
                "name": "coredns-f9fd979d6-9rks2.163d458ad4dac985",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/coredns-f9fd979d6-9rks2.163d458ad4dac985",
                "uid": "4d3ed1ba-873c-4a12-acc1-2c741981d179",
                "resourceVersion": "385",
                "creationTimestamp": "2020-10-12T14:38:24Z",
                "managedFields": [
                    {
                        "manager": "kube-scheduler",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-10-12T14:38:36Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:count": {},
                            "f:firstTimestamp": {},
                            "f:involvedObject": {
                                "f:apiVersion": {},
                                "f:kind": {},
                                "f:name": {},
                                "f:namespace": {},
                                "f:resourceVersion": {},
                                "f:uid": {}
                            },
                            "f:lastTimestamp": {},
                            "f:message": {},
                            "f:reason": {},
                            "f:source": {
                                "f:component": {}
                            },
                            "f:type": {}
                        }
                    }
                ]
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "coredns-f9fd979d6-9rks2",
                "uid": "24683bbf-8219-45b9-8dc6-0806db2ea9d3",
                "apiVersion": "v1",
                "resourceVersion": "332"
            },
            "reason": "FailedScheduling",
            "message": "0/1 nodes are available: 1 node(s) had taint {node.kubernetes.io/not-ready: }, that the pod didn't tolerate.",
            "source": {
                "component": "default-scheduler"
            },
            "firstTimestamp": "2020-10-12T14:38:24Z",
            "lastTimestamp": "2020-10-12T14:38:36Z",
            "count": 4,
            "type": "Warning",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "coredns-f9fd979d6-9rks2.163d458f8537310e",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/coredns-f9fd979d6-9rks2.163d458f8537310e",
                "uid": "1d499fd8-c692-4186-8a40-be33cc81b63d",
                "resourceVersion": "392",
                "creationTimestamp": "2020-10-12T14:38:45Z",
                "managedFields": [
                    {
                        "manager": "kube-scheduler",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-10-12T14:38:45Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:count": {},
                            "f:firstTimestamp": {},
                            "f:involvedObject": {
                                "f:apiVersion": {},
                                "f:kind": {},
                                "f:name": {},
                                "f:namespace": {},
                                "f:resourceVersion": {},
                                "f:uid": {}
                            },
                            "f:lastTimestamp": {},
                            "f:message": {},
                            "f:reason": {},
                            "f:source": {
                                "f:component": {}
                            },
                            "f:type": {}
                        }
                    }
                ]
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "coredns-f9fd979d6-9rks2",
                "uid": "24683bbf-8219-45b9-8dc6-0806db2ea9d3",
                "apiVersion": "v1",
                "resourceVersion": "344"
            },
            "reason": "Scheduled",
            "message": "Successfully assigned kube-system/coredns-f9fd979d6-9rks2 to minikube",
            "source": {
                "component": "default-scheduler"
            },
            "firstTimestamp": "2020-10-12T14:38:45Z",
            "lastTimestamp": "2020-10-12T14:38:45Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "coredns-f9fd979d6-9rks2.163d458fec315e2d",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/coredns-f9fd979d6-9rks2.163d458fec315e2d",
                "uid": "60560c10-dfdb-44ed-92c2-c3829b5a61a0",
                "resourceVersion": "400",
                "creationTimestamp": "2020-10-12T14:38:46Z",
                "managedFields": [
                    {
                        "manager": "kubelet",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-10-12T14:38:46Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:count": {},
                            "f:firstTimestamp": {},
                            "f:involvedObject": {
                                "f:apiVersion": {},
                                "f:fieldPath": {},
                                "f:kind": {},
                                "f:name": {},
                                "f:namespace": {},
                                "f:resourceVersion": {},
                                "f:uid": {}
                            },
                            "f:lastTimestamp": {},
                            "f:message": {},
                            "f:reason": {},
                            "f:source": {
                                "f:component": {},
                                "f:host": {}
                            },
                            "f:type": {}
                        }
                    }
                ]
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "coredns-f9fd979d6-9rks2",
                "uid": "24683bbf-8219-45b9-8dc6-0806db2ea9d3",
                "apiVersion": "v1",
                "resourceVersion": "390",
                "fieldPath": "spec.containers{coredns}"
            },
            "reason": "Pulled",
            "message": "Container image \"k8s.gcr.io/coredns:1.7.0\" already present on machine",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-10-12T14:38:46Z",
            "lastTimestamp": "2020-10-12T14:38:46Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "coredns-f9fd979d6-9rks2.163d458ff3018f74",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/coredns-f9fd979d6-9rks2.163d458ff3018f74",
                "uid": "afa0c713-9b1e-4df7-8bef-9302c2cc8530",
                "resourceVersion": "402",
                "creationTimestamp": "2020-10-12T14:38:46Z",
                "managedFields": [
                    {
                        "manager": "kubelet",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-10-12T14:38:46Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:count": {},
                            "f:firstTimestamp": {},
                            "f:involvedObject": {
                                "f:apiVersion": {},
                                "f:fieldPath": {},
                                "f:kind": {},
                                "f:name": {},
                                "f:namespace": {},
                                "f:resourceVersion": {},
                                "f:uid": {}
                            },
                            "f:lastTimestamp": {},
                            "f:message": {},
                            "f:reason": {},
                            "f:source": {
                                "f:component": {},
                                "f:host": {}
                            },
                            "f:type": {}
                        }
                    }
                ]
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "coredns-f9fd979d6-9rks2",
                "uid": "24683bbf-8219-45b9-8dc6-0806db2ea9d3",
                "apiVersion": "v1",
                "resourceVersion": "390",
                "fieldPath": "spec.containers{coredns}"
            },
            "reason": "Created",
            "message": "Created container coredns",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-10-12T14:38:46Z",
            "lastTimestamp": "2020-10-12T14:38:46Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "coredns-f9fd979d6-9rks2.163d458ffc81bff8",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/coredns-f9fd979d6-9rks2.163d458ffc81bff8",
                "uid": "80eef2e9-fdf1-4e9e-919f-53b9495adb06",
                "resourceVersion": "403",
                "creationTimestamp": "2020-10-12T14:38:47Z",
                "managedFields": [
                    {
                        "manager": "kubelet",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-10-12T14:38:47Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:count": {},
                            "f:firstTimestamp": {},
                            "f:involvedObject": {
                                "f:apiVersion": {},
                                "f:fieldPath": {},
                                "f:kind": {},
                                "f:name": {},
                                "f:namespace": {},
                                "f:resourceVersion": {},
                                "f:uid": {}
                            },
                            "f:lastTimestamp": {},
                            "f:message": {},
                            "f:reason": {},
                            "f:source": {
                                "f:component": {},
                                "f:host": {}
                            },
                            "f:type": {}
                        }
                    }
                ]
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "coredns-f9fd979d6-9rks2",
                "uid": "24683bbf-8219-45b9-8dc6-0806db2ea9d3",
                "apiVersion": "v1",
                "resourceVersion": "390",
                "fieldPath": "spec.containers{coredns}"
            },
            "reason": "Started",
            "message": "Started container coredns",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-10-12T14:38:47Z",
            "lastTimestamp": "2020-10-12T14:38:47Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "coredns-f9fd979d6.163d458ad4002d26",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/coredns-f9fd979d6.163d458ad4002d26",
                "uid": "61c1778d-aebd-47ea-b77e-9f99ba1c6310",
                "resourceVersion": "336",
                "creationTimestamp": "2020-10-12T14:38:24Z",
                "managedFields": [
                    {
                        "manager": "kube-controller-manager",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-10-12T14:38:24Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:count": {},
                            "f:firstTimestamp": {},
                            "f:involvedObject": {
                                "f:apiVersion": {},
                                "f:kind": {},
                                "f:name": {},
                                "f:namespace": {},
                                "f:resourceVersion": {},
                                "f:uid": {}
                            },
                            "f:lastTimestamp": {},
                            "f:message": {},
                            "f:reason": {},
                            "f:source": {
                                "f:component": {}
                            },
                            "f:type": {}
                        }
                    }
                ]
            },
            "involvedObject": {
                "kind": "ReplicaSet",
                "namespace": "kube-system",
                "name": "coredns-f9fd979d6",
                "uid": "dac2134f-a17e-4880-8f9d-de25941e78d4",
                "apiVersion": "apps/v1",
                "resourceVersion": "321"
            },
            "reason": "SuccessfulCreate",
            "message": "Created pod: coredns-f9fd979d6-9rks2",
            "source": {
                "component": "replicaset-controller"
            },
            "firstTimestamp": "2020-10-12T14:38:24Z",
            "lastTimestamp": "2020-10-12T14:38:24Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "coredns.163d458ad148751f",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/coredns.163d458ad148751f",
                "uid": "3d03d82c-839f-44e2-a399-e66c7b2b719b",
                "resourceVersion": "327",
                "creationTimestamp": "2020-10-12T14:38:24Z",
                "managedFields": [
                    {
                        "manager": "kube-controller-manager",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-10-12T14:38:24Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:count": {},
                            "f:firstTimestamp": {},
                            "f:involvedObject": {
                                "f:apiVersion": {},
                                "f:kind": {},
                                "f:name": {},
                                "f:namespace": {},
                                "f:resourceVersion": {},
                                "f:uid": {}
                            },
                            "f:lastTimestamp": {},
                            "f:message": {},
                            "f:reason": {},
                            "f:source": {
                                "f:component": {}
                            },
                            "f:type": {}
                        }
                    }
                ]
            },
            "involvedObject": {
                "kind": "Deployment",
                "namespace": "kube-system",
                "name": "coredns",
                "uid": "53830473-d19f-499f-8e4f-cf1d7bb15723",
                "apiVersion": "apps/v1",
                "resourceVersion": "253"
            },
            "reason": "ScalingReplicaSet",
            "message": "Scaled up replica set coredns-f9fd979d6 to 1",
            "source": {
                "component": "deployment-controller"
            },
            "firstTimestamp": "2020-10-12T14:38:24Z",
            "lastTimestamp": "2020-10-12T14:38:24Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "k8s.io-minikube-hostpath.163d458fdcb4a6b5",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/k8s.io-minikube-hostpath.163d458fdcb4a6b5",
                "uid": "c138444b-0f39-48d9-b867-47d8ebb00155",
                "resourceVersion": "399",
                "creationTimestamp": "2020-10-12T14:38:46Z",
                "managedFields": [
                    {
                        "manager": "storage-provisioner",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-10-12T14:38:46Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:count": {},
                            "f:firstTimestamp": {},
                            "f:involvedObject": {
                                "f:apiVersion": {},
                                "f:kind": {},
                                "f:name": {},
                                "f:namespace": {},
                                "f:resourceVersion": {},
                                "f:uid": {}
                            },
                            "f:lastTimestamp": {},
                            "f:message": {},
                            "f:reason": {},
                            "f:source": {
                                "f:component": {}
                            },
                            "f:type": {}
                        }
                    }
                ]
            },
            "involvedObject": {
                "kind": "Endpoints",
                "namespace": "kube-system",
                "name": "k8s.io-minikube-hostpath",
                "uid": "46df206f-131a-44f5-90a0-45e802af633b",
                "apiVersion": "v1",
                "resourceVersion": "398"
            },
            "reason": "LeaderElection",
            "message": "minikube_0d23bb6c-370b-4f05-af7f-2889f5677823 became leader",
            "source": {
                "component": "k8s.io/minikube-hostpath_minikube_0d23bb6c-370b-4f05-af7f-2889f5677823"
            },
            "firstTimestamp": "2020-10-12T14:38:46Z",
            "lastTimestamp": "2020-10-12T14:38:46Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kube-proxy-qwt4m.163d458ad7ec3413",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/kube-proxy-qwt4m.163d458ad7ec3413",
                "uid": "43768235-f6e4-4318-8546-9ef693dca681",
                "resourceVersion": "348",
                "creationTimestamp": "2020-10-12T14:38:25Z",
                "managedFields": [
                    {
                        "manager": "kube-scheduler",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-10-12T14:38:25Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:count": {},
                            "f:firstTimestamp": {},
                            "f:involvedObject": {
                                "f:apiVersion": {},
                                "f:kind": {},
                                "f:name": {},
                                "f:namespace": {},
                                "f:resourceVersion": {},
                                "f:uid": {}
                            },
                            "f:lastTimestamp": {},
                            "f:message": {},
                            "f:reason": {},
                            "f:source": {
                                "f:component": {}
                            },
                            "f:type": {}
                        }
                    }
                ]
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "kube-proxy-qwt4m",
                "uid": "6329ecf2-6bd2-428d-a400-1d9f14ca48d7",
                "apiVersion": "v1",
                "resourceVersion": "337"
            },
            "reason": "Scheduled",
            "message": "Successfully assigned kube-system/kube-proxy-qwt4m to minikube",
            "source": {
                "component": "default-scheduler"
            },
            "firstTimestamp": "2020-10-12T14:38:25Z",
            "lastTimestamp": "2020-10-12T14:38:25Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kube-proxy-qwt4m.163d458b77bdd9c0",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/kube-proxy-qwt4m.163d458b77bdd9c0",
                "uid": "6667bbd4-812b-4282-96ed-69c5b94eb3dd",
                "resourceVersion": "367",
                "creationTimestamp": "2020-10-12T14:38:27Z",
                "managedFields": [
                    {
                        "manager": "kubelet",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-10-12T14:38:27Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:count": {},
                            "f:firstTimestamp": {},
                            "f:involvedObject": {
                                "f:apiVersion": {},
                                "f:fieldPath": {},
                                "f:kind": {},
                                "f:name": {},
                                "f:namespace": {},
                                "f:resourceVersion": {},
                                "f:uid": {}
                            },
                            "f:lastTimestamp": {},
                            "f:message": {},
                            "f:reason": {},
                            "f:source": {
                                "f:component": {},
                                "f:host": {}
                            },
                            "f:type": {}
                        }
                    }
                ]
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "kube-proxy-qwt4m",
                "uid": "6329ecf2-6bd2-428d-a400-1d9f14ca48d7",
                "apiVersion": "v1",
                "resourceVersion": "346",
                "fieldPath": "spec.containers{kube-proxy}"
            },
            "reason": "Pulled",
            "message": "Container image \"k8s.gcr.io/kube-proxy:v1.19.2\" already present on machine",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-10-12T14:38:27Z",
            "lastTimestamp": "2020-10-12T14:38:27Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kube-proxy-qwt4m.163d458b7d17baa2",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/kube-proxy-qwt4m.163d458b7d17baa2",
                "uid": "4e09a6f7-168e-41c0-b596-a57e0f69b83d",
                "resourceVersion": "368",
                "creationTimestamp": "2020-10-12T14:38:27Z",
                "managedFields": [
                    {
                        "manager": "kubelet",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-10-12T14:38:27Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:count": {},
                            "f:firstTimestamp": {},
                            "f:involvedObject": {
                                "f:apiVersion": {},
                                "f:fieldPath": {},
                                "f:kind": {},
                                "f:name": {},
                                "f:namespace": {},
                                "f:resourceVersion": {},
                                "f:uid": {}
                            },
                            "f:lastTimestamp": {},
                            "f:message": {},
                            "f:reason": {},
                            "f:source": {
                                "f:component": {},
                                "f:host": {}
                            },
                            "f:type": {}
                        }
                    }
                ]
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "kube-proxy-qwt4m",
                "uid": "6329ecf2-6bd2-428d-a400-1d9f14ca48d7",
                "apiVersion": "v1",
                "resourceVersion": "346",
                "fieldPath": "spec.containers{kube-proxy}"
            },
            "reason": "Created",
            "message": "Created container kube-proxy",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-10-12T14:38:27Z",
            "lastTimestamp": "2020-10-12T14:38:27Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kube-proxy-qwt4m.163d458b8763ddaf",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/kube-proxy-qwt4m.163d458b8763ddaf",
                "uid": "16b498ed-bc3f-4a24-b3b5-9c3f21708474",
                "resourceVersion": "370",
                "creationTimestamp": "2020-10-12T14:38:27Z",
                "managedFields": [
                    {
                        "manager": "kubelet",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-10-12T14:38:27Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:count": {},
                            "f:firstTimestamp": {},
                            "f:involvedObject": {
                                "f:apiVersion": {},
                                "f:fieldPath": {},
                                "f:kind": {},
                                "f:name": {},
                                "f:namespace": {},
                                "f:resourceVersion": {},
                                "f:uid": {}
                            },
                            "f:lastTimestamp": {},
                            "f:message": {},
                            "f:reason": {},
                            "f:source": {
                                "f:component": {},
                                "f:host": {}
                            },
                            "f:type": {}
                        }
                    }
                ]
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "kube-proxy-qwt4m",
                "uid": "6329ecf2-6bd2-428d-a400-1d9f14ca48d7",
                "apiVersion": "v1",
                "resourceVersion": "346",
                "fieldPath": "spec.containers{kube-proxy}"
            },
            "reason": "Started",
            "message": "Started container kube-proxy",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-10-12T14:38:27Z",
            "lastTimestamp": "2020-10-12T14:38:27Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kube-proxy.163d458ad4d1b815",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/kube-proxy.163d458ad4d1b815",
                "uid": "f0131a4f-db8e-47eb-8bc4-29a2f36e6d95",
                "resourceVersion": "341",
                "creationTimestamp": "2020-10-12T14:38:24Z",
                "managedFields": [
                    {
                        "manager": "kube-controller-manager",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-10-12T14:38:24Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:count": {},
                            "f:firstTimestamp": {},
                            "f:involvedObject": {
                                "f:apiVersion": {},
                                "f:kind": {},
                                "f:name": {},
                                "f:namespace": {},
                                "f:resourceVersion": {},
                                "f:uid": {}
                            },
                            "f:lastTimestamp": {},
                            "f:message": {},
                            "f:reason": {},
                            "f:source": {
                                "f:component": {}
                            },
                            "f:type": {}
                        }
                    }
                ]
            },
            "involvedObject": {
                "kind": "DaemonSet",
                "namespace": "kube-system",
                "name": "kube-proxy",
                "uid": "a689441f-2658-4607-a2ed-03b3e43c59d1",
                "apiVersion": "apps/v1",
                "resourceVersion": "235"
            },
            "reason": "SuccessfulCreate",
            "message": "Created pod: kube-proxy-qwt4m",
            "source": {
                "component": "daemonset-controller"
            },
            "firstTimestamp": "2020-10-12T14:38:24Z",
            "lastTimestamp": "2020-10-12T14:38:24Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "storage-provisioner.163d458a6a07f922",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/storage-provisioner.163d458a6a07f922",
                "uid": "279fd374-c0f6-45e8-8066-5174b5a54555",
                "resourceVersion": "386",
                "creationTimestamp": "2020-10-12T14:38:23Z",
                "managedFields": [
                    {
                        "manager": "kube-scheduler",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-10-12T14:38:36Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:count": {},
                            "f:firstTimestamp": {},
                            "f:involvedObject": {
                                "f:apiVersion": {},
                                "f:kind": {},
                                "f:name": {},
                                "f:namespace": {},
                                "f:resourceVersion": {},
                                "f:uid": {}
                            },
                            "f:lastTimestamp": {},
                            "f:message": {},
                            "f:reason": {},
                            "f:source": {
                                "f:component": {}
                            },
                            "f:type": {}
                        }
                    }
                ]
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "storage-provisioner",
                "uid": "c737087a-14a6-4034-b734-09b200c89eb5",
                "apiVersion": "v1",
                "resourceVersion": "282"
            },
            "reason": "FailedScheduling",
            "message": "0/1 nodes are available: 1 node(s) had taint {node.kubernetes.io/not-ready: }, that the pod didn't tolerate.",
            "source": {
                "component": "default-scheduler"
            },
            "firstTimestamp": "2020-10-12T14:38:23Z",
            "lastTimestamp": "2020-10-12T14:38:36Z",
            "count": 4,
            "type": "Warning",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "storage-provisioner.163d458f8471486c",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/storage-provisioner.163d458f8471486c",
                "uid": "c0a9f696-e210-464b-adf9-e0d6c12eef6d",
                "resourceVersion": "389",
                "creationTimestamp": "2020-10-12T14:38:45Z",
                "managedFields": [
                    {
                        "manager": "kube-scheduler",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-10-12T14:38:45Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:count": {},
                            "f:firstTimestamp": {},
                            "f:involvedObject": {
                                "f:apiVersion": {},
                                "f:kind": {},
                                "f:name": {},
                                "f:namespace": {},
                                "f:resourceVersion": {},
                                "f:uid": {}
                            },
                            "f:lastTimestamp": {},
                            "f:message": {},
                            "f:reason": {},
                            "f:source": {
                                "f:component": {}
                            },
                            "f:type": {}
                        }
                    }
                ]
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "storage-provisioner",
                "uid": "c737087a-14a6-4034-b734-09b200c89eb5",
                "apiVersion": "v1",
                "resourceVersion": "284"
            },
            "reason": "Scheduled",
            "message": "Successfully assigned kube-system/storage-provisioner to minikube",
            "source": {
                "component": "default-scheduler"
            },
            "firstTimestamp": "2020-10-12T14:38:45Z",
            "lastTimestamp": "2020-10-12T14:38:45Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "storage-provisioner.163d458fbff954be",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/storage-provisioner.163d458fbff954be",
                "uid": "79058132-8a43-45ff-b068-52f9cfddc6d5",
                "resourceVersion": "395",
                "creationTimestamp": "2020-10-12T14:38:46Z",
                "managedFields": [
                    {
                        "manager": "kubelet",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-10-12T14:38:46Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:count": {},
                            "f:firstTimestamp": {},
                            "f:involvedObject": {
                                "f:apiVersion": {},
                                "f:fieldPath": {},
                                "f:kind": {},
                                "f:name": {},
                                "f:namespace": {},
                                "f:resourceVersion": {},
                                "f:uid": {}
                            },
                            "f:lastTimestamp": {},
                            "f:message": {},
                            "f:reason": {},
                            "f:source": {
                                "f:component": {},
                                "f:host": {}
                            },
                            "f:type": {}
                        }
                    }
                ]
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "storage-provisioner",
                "uid": "c737087a-14a6-4034-b734-09b200c89eb5",
                "apiVersion": "v1",
                "resourceVersion": "388",
                "fieldPath": "spec.containers{storage-provisioner}"
            },
            "reason": "Pulled",
            "message": "Container image \"gcr.io/k8s-minikube/storage-provisioner:v3\" already present on machine",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-10-12T14:38:46Z",
            "lastTimestamp": "2020-10-12T14:38:46Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "storage-provisioner.163d458fc5fc670c",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/storage-provisioner.163d458fc5fc670c",
                "uid": "03d61508-b0c5-42a3-95c2-83a0408dfa64",
                "resourceVersion": "396",
                "creationTimestamp": "2020-10-12T14:38:46Z",
                "managedFields": [
                    {
                        "manager": "kubelet",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-10-12T14:38:46Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:count": {},
                            "f:firstTimestamp": {},
                            "f:involvedObject": {
                                "f:apiVersion": {},
                                "f:fieldPath": {},
                                "f:kind": {},
                                "f:name": {},
                                "f:namespace": {},
                                "f:resourceVersion": {},
                                "f:uid": {}
                            },
                            "f:lastTimestamp": {},
                            "f:message": {},
                            "f:reason": {},
                            "f:source": {
                                "f:component": {},
                                "f:host": {}
                            },
                            "f:type": {}
                        }
                    }
                ]
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "storage-provisioner",
                "uid": "c737087a-14a6-4034-b734-09b200c89eb5",
                "apiVersion": "v1",
                "resourceVersion": "388",
                "fieldPath": "spec.containers{storage-provisioner}"
            },
            "reason": "Created",
            "message": "Created container storage-provisioner",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-10-12T14:38:46Z",
            "lastTimestamp": "2020-10-12T14:38:46Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "storage-provisioner.163d458fd0697886",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/storage-provisioner.163d458fd0697886",
                "uid": "21209c25-d150-4a1d-89fa-b51a088caa3b",
                "resourceVersion": "397",
                "creationTimestamp": "2020-10-12T14:38:46Z",
                "managedFields": [
                    {
                        "manager": "kubelet",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-10-12T14:38:46Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:count": {},
                            "f:firstTimestamp": {},
                            "f:involvedObject": {
                                "f:apiVersion": {},
                                "f:fieldPath": {},
                                "f:kind": {},
                                "f:name": {},
                                "f:namespace": {},
                                "f:resourceVersion": {},
                                "f:uid": {}
                            },
                            "f:lastTimestamp": {},
                            "f:message": {},
                            "f:reason": {},
                            "f:source": {
                                "f:component": {},
                                "f:host": {}
                            },
                            "f:type": {}
                        }
                    }
                ]
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "storage-provisioner",
                "uid": "c737087a-14a6-4034-b734-09b200c89eb5",
                "apiVersion": "v1",
                "resourceVersion": "388",
                "fieldPath": "spec.containers{storage-provisioner}"
            },
            "reason": "Started",
            "message": "Started container storage-provisioner",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-10-12T14:38:46Z",
            "lastTimestamp": "2020-10-12T14:38:46Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        }
    ]
}
{
    "kind": "ReplicationControllerList",
    "apiVersion": "v1",
    "metadata": {
        "selfLink": "/api/v1/namespaces/kube-system/replicationcontrollers",
        "resourceVersion": "958"
    },
    "items": []
}
{
    "kind": "ServiceList",
    "apiVersion": "v1",
    "metadata": {
        "selfLink": "/api/v1/namespaces/kube-system/services",
        "resourceVersion": "958"
    },
    "items": [
        {
            "metadata": {
                "name": "kube-dns",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/services/kube-dns",
                "uid": "bbf24d05-4ded-4da7-be4d-eff49cde37c6",
                "resourceVersion": "227",
                "creationTimestamp": "2020-10-12T14:38:19Z",
                "labels": {
                    "k8s-app": "kube-dns",
                    "kubernetes.io/cluster-service": "true",
                    "kubernetes.io/name": "KubeDNS"
                },
                "annotations": {
                    "prometheus.io/port": "9153",
                    "prometheus.io/scrape": "true"
                },
                "managedFields": [
                    {
                        "manager": "kubeadm",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-10-12T14:38:19Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    ".": {},
                                    "f:prometheus.io/port": {},
                                    "f:prometheus.io/scrape": {}
                                },
                                "f:labels": {
                                    ".": {},
                                    "f:k8s-app": {},
                                    "f:kubernetes.io/cluster-service": {},
                                    "f:kubernetes.io/name": {}
                                }
                            },
                            "f:spec": {
                                "f:clusterIP": {},
                                "f:ports": {
                                    ".": {},
                                    "k:{\"port\":53,\"protocol\":\"TCP\"}": {
                                        ".": {},
                                        "f:name": {},
                                        "f:port": {},
                                        "f:protocol": {},
                                        "f:targetPort": {}
                                    },
                                    "k:{\"port\":53,\"protocol\":\"UDP\"}": {
                                        ".": {},
                                        "f:name": {},
                                        "f:port": {},
                                        "f:protocol": {},
                                        "f:targetPort": {}
                                    },
                                    "k:{\"port\":9153,\"protocol\":\"TCP\"}": {
                                        ".": {},
                                        "f:name": {},
                                        "f:port": {},
                                        "f:protocol": {},
                                        "f:targetPort": {}
                                    }
                                },
                                "f:selector": {
                                    ".": {},
                                    "f:k8s-app": {}
                                },
                                "f:sessionAffinity": {},
                                "f:type": {}
                            }
                        }
                    }
                ]
            },
            "spec": {
                "ports": [
                    {
                        "name": "dns",
                        "protocol": "UDP",
                        "port": 53,
                        "targetPort": 53
                    },
                    {
                        "name": "dns-tcp",
                        "protocol": "TCP",
                        "port": 53,
                        "targetPort": 53
                    },
                    {
                        "name": "metrics",
                        "protocol": "TCP",
                        "port": 9153,
                        "targetPort": 9153
                    }
                ],
                "selector": {
                    "k8s-app": "kube-dns"
                },
                "clusterIP": "10.96.0.10",
                "type": "ClusterIP",
                "sessionAffinity": "None"
            },
            "status": {
                "loadBalancer": {}
            }
        }
    ]
}
{
    "kind": "DaemonSetList",
    "apiVersion": "apps/v1",
    "metadata": {
        "selfLink": "/apis/apps/v1/namespaces/kube-system/daemonsets",
        "resourceVersion": "958"
    },
    "items": [
        {
            "metadata": {
                "name": "kube-proxy",
                "namespace": "kube-system",
                "selfLink": "/apis/apps/v1/namespaces/kube-system/daemonsets/kube-proxy",
                "uid": "a689441f-2658-4607-a2ed-03b3e43c59d1",
                "resourceVersion": "376",
                "generation": 1,
                "creationTimestamp": "2020-10-12T14:38:19Z",
                "labels": {
                    "k8s-app": "kube-proxy"
                },
                "annotations": {
                    "deprecated.daemonset.template.generation": "1"
                },
                "managedFields": [
                    {
                        "manager": "kubeadm",
                        "operation": "Update",
                        "apiVersion": "apps/v1",
                        "time": "2020-10-12T14:38:19Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    ".": {},
                                    "f:deprecated.daemonset.template.generation": {}
                                },
                                "f:labels": {
                                    ".": {},
                                    "f:k8s-app": {}
                                }
                            },
                            "f:spec": {
                                "f:revisionHistoryLimit": {},
                                "f:selector": {
                                    "f:matchLabels": {
                                        ".": {},
                                        "f:k8s-app": {}
                                    }
                                },
                                "f:template": {
                                    "f:metadata": {
                                        "f:labels": {
                                            ".": {},
                                            "f:k8s-app": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:containers": {
                                            "k:{\"name\":\"kube-proxy\"}": {
                                                ".": {},
                                                "f:command": {},
                                                "f:env": {
                                                    ".": {},
                                                    "k:{\"name\":\"NODE_NAME\"}": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:valueFrom": {
                                                            ".": {},
                                                            "f:fieldRef": {
                                                                ".": {},
                                                                "f:apiVersion": {},
                                                                "f:fieldPath": {}
                                                            }
                                                        }
                                                    }
                                                },
                                                "f:image": {},
                                                "f:imagePullPolicy": {},
                                                "f:name": {},
                                                "f:resources": {},
                                                "f:securityContext": {
                                                    ".": {},
                                                    "f:privileged": {}
                                                },
                                                "f:terminationMessagePath": {},
                                                "f:terminationMessagePolicy": {},
                                                "f:volumeMounts": {
                                                    ".": {},
                                                    "k:{\"mountPath\":\"/lib/modules\"}": {
                                                        ".": {},
                                                        "f:mountPath": {},
                                                        "f:name": {},
                                                        "f:readOnly": {}
                                                    },
                                                    "k:{\"mountPath\":\"/run/xtables.lock\"}": {
                                                        ".": {},
                                                        "f:mountPath": {},
                                                        "f:name": {}
                                                    },
                                                    "k:{\"mountPath\":\"/var/lib/kube-proxy\"}": {
                                                        ".": {},
                                                        "f:mountPath": {},
                                                        "f:name": {}
                                                    }
                                                }
                                            }
                                        },
                                        "f:dnsPolicy": {},
                                        "f:hostNetwork": {},
                                        "f:nodeSelector": {
                                            ".": {},
                                            "f:kubernetes.io/os": {}
                                        },
                                        "f:priorityClassName": {},
                                        "f:restartPolicy": {},
                                        "f:schedulerName": {},
                                        "f:securityContext": {},
                                        "f:serviceAccount": {},
                                        "f:serviceAccountName": {},
                                        "f:terminationGracePeriodSeconds": {},
                                        "f:tolerations": {},
                                        "f:volumes": {
                                            ".": {},
                                            "k:{\"name\":\"kube-proxy\"}": {
                                                ".": {},
                                                "f:configMap": {
                                                    ".": {},
                                                    "f:defaultMode": {},
                                                    "f:name": {}
                                                },
                                                "f:name": {}
                                            },
                                            "k:{\"name\":\"lib-modules\"}": {
                                                ".": {},
                                                "f:hostPath": {
                                                    ".": {},
                                                    "f:path": {},
                                                    "f:type": {}
                                                },
                                                "f:name": {}
                                            },
                                            "k:{\"name\":\"xtables-lock\"}": {
                                                ".": {},
                                                "f:hostPath": {
                                                    ".": {},
                                                    "f:path": {},
                                                    "f:type": {}
                                                },
                                                "f:name": {}
                                            }
                                        }
                                    }
                                },
                                "f:updateStrategy": {
                                    "f:rollingUpdate": {
                                        ".": {},
                                        "f:maxUnavailable": {}
                                    },
                                    "f:type": {}
                                }
                            }
                        }
                    },
                    {
                        "manager": "kube-controller-manager",
                        "operation": "Update",
                        "apiVersion": "apps/v1",
                        "time": "2020-10-12T14:38:29Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:status": {
                                "f:currentNumberScheduled": {},
                                "f:desiredNumberScheduled": {},
                                "f:numberAvailable": {},
                                "f:numberReady": {},
                                "f:observedGeneration": {},
                                "f:updatedNumberScheduled": {}
                            }
                        }
                    }
                ]
            },
            "spec": {
                "selector": {
                    "matchLabels": {
                        "k8s-app": "kube-proxy"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "k8s-app": "kube-proxy"
                        }
                    },
                    "spec": {
                        "volumes": [
                            {
                                "name": "kube-proxy",
                                "configMap": {
                                    "name": "kube-proxy",
                                    "defaultMode": 420
                                }
                            },
                            {
                                "name": "xtables-lock",
                                "hostPath": {
                                    "path": "/run/xtables.lock",
                                    "type": "FileOrCreate"
                                }
                            },
                            {
                                "name": "lib-modules",
                                "hostPath": {
                                    "path": "/lib/modules",
                                    "type": ""
                                }
                            }
                        ],
                        "containers": [
                            {
                                "name": "kube-proxy",
                                "image": "k8s.gcr.io/kube-proxy:v1.19.2",
                                "command": [
                                    "/usr/local/bin/kube-proxy",
                                    "--config=/var/lib/kube-proxy/config.conf",
                                    "--hostname-override=$(NODE_NAME)"
                                ],
                                "env": [
                                    {
                                        "name": "NODE_NAME",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "spec.nodeName"
                                            }
                                        }
                                    }
                                ],
                                "resources": {},
                                "volumeMounts": [
                                    {
                                        "name": "kube-proxy",
                                        "mountPath": "/var/lib/kube-proxy"
                                    },
                                    {
                                        "name": "xtables-lock",
                                        "mountPath": "/run/xtables.lock"
                                    },
                                    {
                                        "name": "lib-modules",
                                        "readOnly": true,
                                        "mountPath": "/lib/modules"
                                    }
                                ],
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent",
                                "securityContext": {
                                    "privileged": true
                                }
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 30,
                        "dnsPolicy": "ClusterFirst",
                        "nodeSelector": {
                            "kubernetes.io/os": "linux"
                        },
                        "serviceAccountName": "kube-proxy",
                        "serviceAccount": "kube-proxy",
                        "hostNetwork": true,
                        "securityContext": {},
                        "schedulerName": "default-scheduler",
                        "tolerations": [
                            {
                                "key": "CriticalAddonsOnly",
                                "operator": "Exists"
                            },
                            {
                                "operator": "Exists"
                            }
                        ],
                        "priorityClassName": "system-node-critical"
                    }
                },
                "updateStrategy": {
                    "type": "RollingUpdate",
                    "rollingUpdate": {
                        "maxUnavailable": 1
                    }
                },
                "revisionHistoryLimit": 10
            },
            "status": {
                "currentNumberScheduled": 1,
                "numberMisscheduled": 0,
                "desiredNumberScheduled": 1,
                "numberReady": 1,
                "observedGeneration": 1,
                "updatedNumberScheduled": 1,
                "numberAvailable": 1
            }
        }
    ]
}
{
    "kind": "DeploymentList",
    "apiVersion": "apps/v1",
    "metadata": {
        "selfLink": "/apis/apps/v1/namespaces/kube-system/deployments",
        "resourceVersion": "958"
    },
    "items": [
        {
            "metadata": {
                "name": "coredns",
                "namespace": "kube-system",
                "selfLink": "/apis/apps/v1/namespaces/kube-system/deployments/coredns",
                "uid": "53830473-d19f-499f-8e4f-cf1d7bb15723",
                "resourceVersion": "415",
                "generation": 2,
                "creationTimestamp": "2020-10-12T14:38:19Z",
                "labels": {
                    "k8s-app": "kube-dns"
                },
                "annotations": {
                    "deployment.kubernetes.io/revision": "1"
                },
                "managedFields": [
                    {
                        "manager": "kubeadm",
                        "operation": "Update",
                        "apiVersion": "apps/v1",
                        "time": "2020-10-12T14:38:19Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:labels": {
                                    ".": {},
                                    "f:k8s-app": {}
                                }
                            },
                            "f:spec": {
                                "f:progressDeadlineSeconds": {},
                                "f:replicas": {},
                                "f:revisionHistoryLimit": {},
                                "f:selector": {
                                    "f:matchLabels": {
                                        ".": {},
                                        "f:k8s-app": {}
                                    }
                                },
                                "f:strategy": {
                                    "f:rollingUpdate": {
                                        ".": {},
                                        "f:maxSurge": {},
                                        "f:maxUnavailable": {}
                                    },
                                    "f:type": {}
                                },
                                "f:template": {
                                    "f:metadata": {
                                        "f:labels": {
                                            ".": {},
                                            "f:k8s-app": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:containers": {
                                            "k:{\"name\":\"coredns\"}": {
                                                ".": {},
                                                "f:args": {},
                                                "f:image": {},
                                                "f:imagePullPolicy": {},
                                                "f:livenessProbe": {
                                                    ".": {},
                                                    "f:failureThreshold": {},
                                                    "f:httpGet": {
                                                        ".": {},
                                                        "f:path": {},
                                                        "f:port": {},
                                                        "f:scheme": {}
                                                    },
                                                    "f:initialDelaySeconds": {},
                                                    "f:periodSeconds": {},
                                                    "f:successThreshold": {},
                                                    "f:timeoutSeconds": {}
                                                },
                                                "f:name": {},
                                                "f:ports": {
                                                    ".": {},
                                                    "k:{\"containerPort\":53,\"protocol\":\"TCP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:name": {},
                                                        "f:protocol": {}
                                                    },
                                                    "k:{\"containerPort\":53,\"protocol\":\"UDP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:name": {},
                                                        "f:protocol": {}
                                                    },
                                                    "k:{\"containerPort\":9153,\"protocol\":\"TCP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:name": {},
                                                        "f:protocol": {}
                                                    }
                                                },
                                                "f:readinessProbe": {
                                                    ".": {},
                                                    "f:failureThreshold": {},
                                                    "f:httpGet": {
                                                        ".": {},
                                                        "f:path": {},
                                                        "f:port": {},
                                                        "f:scheme": {}
                                                    },
                                                    "f:periodSeconds": {},
                                                    "f:successThreshold": {},
                                                    "f:timeoutSeconds": {}
                                                },
                                                "f:resources": {
                                                    ".": {},
                                                    "f:limits": {
                                                        ".": {},
                                                        "f:memory": {}
                                                    },
                                                    "f:requests": {
                                                        ".": {},
                                                        "f:cpu": {},
                                                        "f:memory": {}
                                                    }
                                                },
                                                "f:securityContext": {
                                                    ".": {},
                                                    "f:allowPrivilegeEscalation": {},
                                                    "f:capabilities": {
                                                        ".": {},
                                                        "f:add": {},
                                                        "f:drop": {}
                                                    },
                                                    "f:readOnlyRootFilesystem": {}
                                                },
                                                "f:terminationMessagePath": {},
                                                "f:terminationMessagePolicy": {},
                                                "f:volumeMounts": {
                                                    ".": {},
                                                    "k:{\"mountPath\":\"/etc/coredns\"}": {
                                                        ".": {},
                                                        "f:mountPath": {},
                                                        "f:name": {},
                                                        "f:readOnly": {}
                                                    }
                                                }
                                            }
                                        },
                                        "f:dnsPolicy": {},
                                        "f:nodeSelector": {
                                            ".": {},
                                            "f:kubernetes.io/os": {}
                                        },
                                        "f:priorityClassName": {},
                                        "f:restartPolicy": {},
                                        "f:schedulerName": {},
                                        "f:securityContext": {},
                                        "f:serviceAccount": {},
                                        "f:serviceAccountName": {},
                                        "f:terminationGracePeriodSeconds": {},
                                        "f:tolerations": {},
                                        "f:volumes": {
                                            ".": {},
                                            "k:{\"name\":\"config-volume\"}": {
                                                ".": {},
                                                "f:configMap": {
                                                    ".": {},
                                                    "f:defaultMode": {},
                                                    "f:items": {},
                                                    "f:name": {}
                                                },
                                                "f:name": {}
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    {
                        "manager": "kube-controller-manager",
                        "operation": "Update",
                        "apiVersion": "apps/v1",
                        "time": "2020-10-12T14:38:54Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    ".": {},
                                    "f:deployment.kubernetes.io/revision": {}
                                }
                            },
                            "f:status": {
                                "f:availableReplicas": {},
                                "f:conditions": {
                                    ".": {},
                                    "k:{\"type\":\"Available\"}": {
                                        ".": {},
                                        "f:lastTransitionTime": {},
                                        "f:lastUpdateTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Progressing\"}": {
                                        ".": {},
                                        "f:lastTransitionTime": {},
                                        "f:lastUpdateTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    }
                                },
                                "f:observedGeneration": {},
                                "f:readyReplicas": {},
                                "f:replicas": {},
                                "f:updatedReplicas": {}
                            }
                        }
                    }
                ]
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "matchLabels": {
                        "k8s-app": "kube-dns"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "k8s-app": "kube-dns"
                        }
                    },
                    "spec": {
                        "volumes": [
                            {
                                "name": "config-volume",
                                "configMap": {
                                    "name": "coredns",
                                    "items": [
                                        {
                                            "key": "Corefile",
                                            "path": "Corefile"
                                        }
                                    ],
                                    "defaultMode": 420
                                }
                            }
                        ],
                        "containers": [
                            {
                                "name": "coredns",
                                "image": "k8s.gcr.io/coredns:1.7.0",
                                "args": [
                                    "-conf",
                                    "/etc/coredns/Corefile"
                                ],
                                "ports": [
                                    {
                                        "name": "dns",
                                        "containerPort": 53,
                                        "protocol": "UDP"
                                    },
                                    {
                                        "name": "dns-tcp",
                                        "containerPort": 53,
                                        "protocol": "TCP"
                                    },
                                    {
                                        "name": "metrics",
                                        "containerPort": 9153,
                                        "protocol": "TCP"
                                    }
                                ],
                                "resources": {
                                    "limits": {
                                        "memory": "170Mi"
                                    },
                                    "requests": {
                                        "cpu": "100m",
                                        "memory": "70Mi"
                                    }
                                },
                                "volumeMounts": [
                                    {
                                        "name": "config-volume",
                                        "readOnly": true,
                                        "mountPath": "/etc/coredns"
                                    }
                                ],
                                "livenessProbe": {
                                    "httpGet": {
                                        "path": "/health",
                                        "port": 8080,
                                        "scheme": "HTTP"
                                    },
                                    "initialDelaySeconds": 60,
                                    "timeoutSeconds": 5,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 5
                                },
                                "readinessProbe": {
                                    "httpGet": {
                                        "path": "/ready",
                                        "port": 8181,
                                        "scheme": "HTTP"
                                    },
                                    "timeoutSeconds": 1,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 3
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent",
                                "securityContext": {
                                    "capabilities": {
                                        "add": [
                                            "NET_BIND_SERVICE"
                                        ],
                                        "drop": [
                                            "all"
                                        ]
                                    },
                                    "readOnlyRootFilesystem": true,
                                    "allowPrivilegeEscalation": false
                                }
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 30,
                        "dnsPolicy": "Default",
                        "nodeSelector": {
                            "kubernetes.io/os": "linux"
                        },
                        "serviceAccountName": "coredns",
                        "serviceAccount": "coredns",
                        "securityContext": {},
                        "schedulerName": "default-scheduler",
                        "tolerations": [
                            {
                                "key": "CriticalAddonsOnly",
                                "operator": "Exists"
                            },
                            {
                                "key": "node-role.kubernetes.io/master",
                                "effect": "NoSchedule"
                            }
                        ],
                        "priorityClassName": "system-cluster-critical"
                    }
                },
                "strategy": {
                    "type": "RollingUpdate",
                    "rollingUpdate": {
                        "maxUnavailable": 1,
                        "maxSurge": "25%"
                    }
                },
                "revisionHistoryLimit": 10,
                "progressDeadlineSeconds": 600
            },
            "status": {
                "observedGeneration": 2,
                "replicas": 1,
                "updatedReplicas": 1,
                "readyReplicas": 1,
                "availableReplicas": 1,
                "conditions": [
                    {
                        "type": "Available",
                        "status": "True",
                        "lastUpdateTime": "2020-10-12T14:38:24Z",
                        "lastTransitionTime": "2020-10-12T14:38:24Z",
                        "reason": "MinimumReplicasAvailable",
                        "message": "Deployment has minimum availability."
                    },
                    {
                        "type": "Progressing",
                        "status": "True",
                        "lastUpdateTime": "2020-10-12T14:38:54Z",
                        "lastTransitionTime": "2020-10-12T14:38:24Z",
                        "reason": "NewReplicaSetAvailable",
                        "message": "ReplicaSet \"coredns-f9fd979d6\" has successfully progressed."
                    }
                ]
            }
        }
    ]
}
{
    "kind": "ReplicaSetList",
    "apiVersion": "apps/v1",
    "metadata": {
        "selfLink": "/apis/apps/v1/namespaces/kube-system/replicasets",
        "resourceVersion": "958"
    },
    "items": [
        {
            "metadata": {
                "name": "coredns-f9fd979d6",
                "namespace": "kube-system",
                "selfLink": "/apis/apps/v1/namespaces/kube-system/replicasets/coredns-f9fd979d6",
                "uid": "dac2134f-a17e-4880-8f9d-de25941e78d4",
                "resourceVersion": "412",
                "generation": 1,
                "creationTimestamp": "2020-10-12T14:38:24Z",
                "labels": {
                    "k8s-app": "kube-dns",
                    "pod-template-hash": "f9fd979d6"
                },
                "annotations": {
                    "deployment.kubernetes.io/desired-replicas": "1",
                    "deployment.kubernetes.io/max-replicas": "2",
                    "deployment.kubernetes.io/revision": "1"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "Deployment",
                        "name": "coredns",
                        "uid": "53830473-d19f-499f-8e4f-cf1d7bb15723",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ],
                "managedFields": [
                    {
                        "manager": "kube-controller-manager",
                        "operation": "Update",
                        "apiVersion": "apps/v1",
                        "time": "2020-10-12T14:38:54Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    ".": {},
                                    "f:deployment.kubernetes.io/desired-replicas": {},
                                    "f:deployment.kubernetes.io/max-replicas": {},
                                    "f:deployment.kubernetes.io/revision": {}
                                },
                                "f:labels": {
                                    ".": {},
                                    "f:k8s-app": {},
                                    "f:pod-template-hash": {}
                                },
                                "f:ownerReferences": {
                                    ".": {},
                                    "k:{\"uid\":\"53830473-d19f-499f-8e4f-cf1d7bb15723\"}": {
                                        ".": {},
                                        "f:apiVersion": {},
                                        "f:blockOwnerDeletion": {},
                                        "f:controller": {},
                                        "f:kind": {},
                                        "f:name": {},
                                        "f:uid": {}
                                    }
                                }
                            },
                            "f:spec": {
                                "f:replicas": {},
                                "f:selector": {
                                    "f:matchLabels": {
                                        ".": {},
                                        "f:k8s-app": {},
                                        "f:pod-template-hash": {}
                                    }
                                },
                                "f:template": {
                                    "f:metadata": {
                                        "f:labels": {
                                            ".": {},
                                            "f:k8s-app": {},
                                            "f:pod-template-hash": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:containers": {
                                            "k:{\"name\":\"coredns\"}": {
                                                ".": {},
                                                "f:args": {},
                                                "f:image": {},
                                                "f:imagePullPolicy": {},
                                                "f:livenessProbe": {
                                                    ".": {},
                                                    "f:failureThreshold": {},
                                                    "f:httpGet": {
                                                        ".": {},
                                                        "f:path": {},
                                                        "f:port": {},
                                                        "f:scheme": {}
                                                    },
                                                    "f:initialDelaySeconds": {},
                                                    "f:periodSeconds": {},
                                                    "f:successThreshold": {},
                                                    "f:timeoutSeconds": {}
                                                },
                                                "f:name": {},
                                                "f:ports": {
                                                    ".": {},
                                                    "k:{\"containerPort\":53,\"protocol\":\"TCP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:name": {},
                                                        "f:protocol": {}
                                                    },
                                                    "k:{\"containerPort\":53,\"protocol\":\"UDP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:name": {},
                                                        "f:protocol": {}
                                                    },
                                                    "k:{\"containerPort\":9153,\"protocol\":\"TCP\"}": {
                                                        ".": {},
                                                        "f:containerPort": {},
                                                        "f:name": {},
                                                        "f:protocol": {}
                                                    }
                                                },
                                                "f:readinessProbe": {
                                                    ".": {},
                                                    "f:failureThreshold": {},
                                                    "f:httpGet": {
                                                        ".": {},
                                                        "f:path": {},
                                                        "f:port": {},
                                                        "f:scheme": {}
                                                    },
                                                    "f:periodSeconds": {},
                                                    "f:successThreshold": {},
                                                    "f:timeoutSeconds": {}
                                                },
                                                "f:resources": {
                                                    ".": {},
                                                    "f:limits": {
                                                        ".": {},
                                                        "f:memory": {}
                                                    },
                                                    "f:requests": {
                                                        ".": {},
                                                        "f:cpu": {},
                                                        "f:memory": {}
                                                    }
                                                },
                                                "f:securityContext": {
                                                    ".": {},
                                                    "f:allowPrivilegeEscalation": {},
                                                    "f:capabilities": {
                                                        ".": {},
                                                        "f:add": {},
                                                        "f:drop": {}
                                                    },
                                                    "f:readOnlyRootFilesystem": {}
                                                },
                                                "f:terminationMessagePath": {},
                                                "f:terminationMessagePolicy": {},
                                                "f:volumeMounts": {
                                                    ".": {},
                                                    "k:{\"mountPath\":\"/etc/coredns\"}": {
                                                        ".": {},
                                                        "f:mountPath": {},
                                                        "f:name": {},
                                                        "f:readOnly": {}
                                                    }
                                                }
                                            }
                                        },
                                        "f:dnsPolicy": {},
                                        "f:nodeSelector": {
                                            ".": {},
                                            "f:kubernetes.io/os": {}
                                        },
                                        "f:priorityClassName": {},
                                        "f:restartPolicy": {},
                                        "f:schedulerName": {},
                                        "f:securityContext": {},
                                        "f:serviceAccount": {},
                                        "f:serviceAccountName": {},
                                        "f:terminationGracePeriodSeconds": {},
                                        "f:tolerations": {},
                                        "f:volumes": {
                                            ".": {},
                                            "k:{\"name\":\"config-volume\"}": {
                                                ".": {},
                                                "f:configMap": {
                                                    ".": {},
                                                    "f:defaultMode": {},
                                                    "f:items": {},
                                                    "f:name": {}
                                                },
                                                "f:name": {}
                                            }
                                        }
                                    }
                                }
                            },
                            "f:status": {
                                "f:availableReplicas": {},
                                "f:fullyLabeledReplicas": {},
                                "f:observedGeneration": {},
                                "f:readyReplicas": {},
                                "f:replicas": {}
                            }
                        }
                    }
                ]
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "matchLabels": {
                        "k8s-app": "kube-dns",
                        "pod-template-hash": "f9fd979d6"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "k8s-app": "kube-dns",
                            "pod-template-hash": "f9fd979d6"
                        }
                    },
                    "spec": {
                        "volumes": [
                            {
                                "name": "config-volume",
                                "configMap": {
                                    "name": "coredns",
                                    "items": [
                                        {
                                            "key": "Corefile",
                                            "path": "Corefile"
                                        }
                                    ],
                                    "defaultMode": 420
                                }
                            }
                        ],
                        "containers": [
                            {
                                "name": "coredns",
                                "image": "k8s.gcr.io/coredns:1.7.0",
                                "args": [
                                    "-conf",
                                    "/etc/coredns/Corefile"
                                ],
                                "ports": [
                                    {
                                        "name": "dns",
                                        "containerPort": 53,
                                        "protocol": "UDP"
                                    },
                                    {
                                        "name": "dns-tcp",
                                        "containerPort": 53,
                                        "protocol": "TCP"
                                    },
                                    {
                                        "name": "metrics",
                                        "containerPort": 9153,
                                        "protocol": "TCP"
                                    }
                                ],
                                "resources": {
                                    "limits": {
                                        "memory": "170Mi"
                                    },
                                    "requests": {
                                        "cpu": "100m",
                                        "memory": "70Mi"
                                    }
                                },
                                "volumeMounts": [
                                    {
                                        "name": "config-volume",
                                        "readOnly": true,
                                        "mountPath": "/etc/coredns"
                                    }
                                ],
                                "livenessProbe": {
                                    "httpGet": {
                                        "path": "/health",
                                        "port": 8080,
                                        "scheme": "HTTP"
                                    },
                                    "initialDelaySeconds": 60,
                                    "timeoutSeconds": 5,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 5
                                },
                                "readinessProbe": {
                                    "httpGet": {
                                        "path": "/ready",
                                        "port": 8181,
                                        "scheme": "HTTP"
                                    },
                                    "timeoutSeconds": 1,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 3
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent",
                                "securityContext": {
                                    "capabilities": {
                                        "add": [
                                            "NET_BIND_SERVICE"
                                        ],
                                        "drop": [
                                            "all"
                                        ]
                                    },
                                    "readOnlyRootFilesystem": true,
                                    "allowPrivilegeEscalation": false
                                }
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 30,
                        "dnsPolicy": "Default",
                        "nodeSelector": {
                            "kubernetes.io/os": "linux"
                        },
                        "serviceAccountName": "coredns",
                        "serviceAccount": "coredns",
                        "securityContext": {},
                        "schedulerName": "default-scheduler",
                        "tolerations": [
                            {
                                "key": "CriticalAddonsOnly",
                                "operator": "Exists"
                            },
                            {
                                "key": "node-role.kubernetes.io/master",
                                "effect": "NoSchedule"
                            }
                        ],
                        "priorityClassName": "system-cluster-critical"
                    }
                }
            },
            "status": {
                "replicas": 1,
                "fullyLabeledReplicas": 1,
                "readyReplicas": 1,
                "availableReplicas": 1,
                "observedGeneration": 1
            }
        }
    ]
}
{
    "kind": "PodList",
    "apiVersion": "v1",
    "metadata": {
        "selfLink": "/api/v1/namespaces/kube-system/pods",
        "resourceVersion": "958"
    },
    "items": [
        {
            "metadata": {
                "name": "coredns-f9fd979d6-9rks2",
                "generateName": "coredns-f9fd979d6-",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/pods/coredns-f9fd979d6-9rks2",
                "uid": "24683bbf-8219-45b9-8dc6-0806db2ea9d3",
                "resourceVersion": "411",
                "creationTimestamp": "2020-10-12T14:38:24Z",
                "labels": {
                    "k8s-app": "kube-dns",
                    "pod-template-hash": "f9fd979d6"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "ReplicaSet",
                        "name": "coredns-f9fd979d6",
                        "uid": "dac2134f-a17e-4880-8f9d-de25941e78d4",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ],
                "managedFields": [
                    {
                        "manager": "kube-controller-manager",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-10-12T14:38:24Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:generateName": {},
                                "f:labels": {
                                    ".": {},
                                    "f:k8s-app": {},
                                    "f:pod-template-hash": {}
                                },
                                "f:ownerReferences": {
                                    ".": {},
                                    "k:{\"uid\":\"dac2134f-a17e-4880-8f9d-de25941e78d4\"}": {
                                        ".": {},
                                        "f:apiVersion": {},
                                        "f:blockOwnerDeletion": {},
                                        "f:controller": {},
                                        "f:kind": {},
                                        "f:name": {},
                                        "f:uid": {}
                                    }
                                }
                            },
                            "f:spec": {
                                "f:containers": {
                                    "k:{\"name\":\"coredns\"}": {
                                        ".": {},
                                        "f:args": {},
                                        "f:image": {},
                                        "f:imagePullPolicy": {},
                                        "f:livenessProbe": {
                                            ".": {},
                                            "f:failureThreshold": {},
                                            "f:httpGet": {
                                                ".": {},
                                                "f:path": {},
                                                "f:port": {},
                                                "f:scheme": {}
                                            },
                                            "f:initialDelaySeconds": {},
                                            "f:periodSeconds": {},
                                            "f:successThreshold": {},
                                            "f:timeoutSeconds": {}
                                        },
                                        "f:name": {},
                                        "f:ports": {
                                            ".": {},
                                            "k:{\"containerPort\":53,\"protocol\":\"TCP\"}": {
                                                ".": {},
                                                "f:containerPort": {},
                                                "f:name": {},
                                                "f:protocol": {}
                                            },
                                            "k:{\"containerPort\":53,\"protocol\":\"UDP\"}": {
                                                ".": {},
                                                "f:containerPort": {},
                                                "f:name": {},
                                                "f:protocol": {}
                                            },
                                            "k:{\"containerPort\":9153,\"protocol\":\"TCP\"}": {
                                                ".": {},
                                                "f:containerPort": {},
                                                "f:name": {},
                                                "f:protocol": {}
                                            }
                                        },
                                        "f:readinessProbe": {
                                            ".": {},
                                            "f:failureThreshold": {},
                                            "f:httpGet": {
                                                ".": {},
                                                "f:path": {},
                                                "f:port": {},
                                                "f:scheme": {}
                                            },
                                            "f:periodSeconds": {},
                                            "f:successThreshold": {},
                                            "f:timeoutSeconds": {}
                                        },
                                        "f:resources": {
                                            ".": {},
                                            "f:limits": {
                                                ".": {},
                                                "f:memory": {}
                                            },
                                            "f:requests": {
                                                ".": {},
                                                "f:cpu": {},
                                                "f:memory": {}
                                            }
                                        },
                                        "f:securityContext": {
                                            ".": {},
                                            "f:allowPrivilegeEscalation": {},
                                            "f:capabilities": {
                                                ".": {},
                                                "f:add": {},
                                                "f:drop": {}
                                            },
                                            "f:readOnlyRootFilesystem": {}
                                        },
                                        "f:terminationMessagePath": {},
                                        "f:terminationMessagePolicy": {},
                                        "f:volumeMounts": {
                                            ".": {},
                                            "k:{\"mountPath\":\"/etc/coredns\"}": {
                                                ".": {},
                                                "f:mountPath": {},
                                                "f:name": {},
                                                "f:readOnly": {}
                                            }
                                        }
                                    }
                                },
                                "f:dnsPolicy": {},
                                "f:enableServiceLinks": {},
                                "f:nodeSelector": {
                                    ".": {},
                                    "f:kubernetes.io/os": {}
                                },
                                "f:priorityClassName": {},
                                "f:restartPolicy": {},
                                "f:schedulerName": {},
                                "f:securityContext": {},
                                "f:serviceAccount": {},
                                "f:serviceAccountName": {},
                                "f:terminationGracePeriodSeconds": {},
                                "f:tolerations": {},
                                "f:volumes": {
                                    ".": {},
                                    "k:{\"name\":\"config-volume\"}": {
                                        ".": {},
                                        "f:configMap": {
                                            ".": {},
                                            "f:defaultMode": {},
                                            "f:items": {},
                                            "f:name": {}
                                        },
                                        "f:name": {}
                                    }
                                }
                            }
                        }
                    },
                    {
                        "manager": "kube-scheduler",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-10-12T14:38:25Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:status": {
                                "f:conditions": {
                                    ".": {},
                                    "k:{\"type\":\"PodScheduled\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    }
                                }
                            }
                        }
                    },
                    {
                        "manager": "kubelet",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-10-12T14:38:54Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:status": {
                                "f:conditions": {
                                    "k:{\"type\":\"ContainersReady\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Initialized\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Ready\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    }
                                },
                                "f:containerStatuses": {},
                                "f:hostIP": {},
                                "f:phase": {},
                                "f:podIP": {},
                                "f:podIPs": {
                                    ".": {},
                                    "k:{\"ip\":\"172.18.0.2\"}": {
                                        ".": {},
                                        "f:ip": {}
                                    }
                                },
                                "f:startTime": {}
                            }
                        }
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "config-volume",
                        "configMap": {
                            "name": "coredns",
                            "items": [
                                {
                                    "key": "Corefile",
                                    "path": "Corefile"
                                }
                            ],
                            "defaultMode": 420
                        }
                    },
                    {
                        "name": "coredns-token-fgnqn",
                        "secret": {
                            "secretName": "coredns-token-fgnqn",
                            "defaultMode": 420
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "coredns",
                        "image": "k8s.gcr.io/coredns:1.7.0",
                        "args": [
                            "-conf",
                            "/etc/coredns/Corefile"
                        ],
                        "ports": [
                            {
                                "name": "dns",
                                "containerPort": 53,
                                "protocol": "UDP"
                            },
                            {
                                "name": "dns-tcp",
                                "containerPort": 53,
                                "protocol": "TCP"
                            },
                            {
                                "name": "metrics",
                                "containerPort": 9153,
                                "protocol": "TCP"
                            }
                        ],
                        "resources": {
                            "limits": {
                                "memory": "170Mi"
                            },
                            "requests": {
                                "cpu": "100m",
                                "memory": "70Mi"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "config-volume",
                                "readOnly": true,
                                "mountPath": "/etc/coredns"
                            },
                            {
                                "name": "coredns-token-fgnqn",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "livenessProbe": {
                            "httpGet": {
                                "path": "/health",
                                "port": 8080,
                                "scheme": "HTTP"
                            },
                            "initialDelaySeconds": 60,
                            "timeoutSeconds": 5,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 5
                        },
                        "readinessProbe": {
                            "httpGet": {
                                "path": "/ready",
                                "port": 8181,
                                "scheme": "HTTP"
                            },
                            "timeoutSeconds": 1,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 3
                        },
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent",
                        "securityContext": {
                            "capabilities": {
                                "add": [
                                    "NET_BIND_SERVICE"
                                ],
                                "drop": [
                                    "all"
                                ]
                            },
                            "readOnlyRootFilesystem": true,
                            "allowPrivilegeEscalation": false
                        }
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "Default",
                "nodeSelector": {
                    "kubernetes.io/os": "linux"
                },
                "serviceAccountName": "coredns",
                "serviceAccount": "coredns",
                "nodeName": "minikube",
                "securityContext": {},
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "key": "CriticalAddonsOnly",
                        "operator": "Exists"
                    },
                    {
                        "key": "node-role.kubernetes.io/master",
                        "effect": "NoSchedule"
                    },
                    {
                        "key": "node.kubernetes.io/not-ready",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    },
                    {
                        "key": "node.kubernetes.io/unreachable",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    }
                ],
                "priorityClassName": "system-cluster-critical",
                "priority": 2000000000,
                "enableServiceLinks": true,
                "preemptionPolicy": "PreemptLowerPriority"
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-10-12T14:38:45Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-10-12T14:38:54Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-10-12T14:38:54Z"
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-10-12T14:38:45Z"
                    }
                ],
                "hostIP": "172.17.0.3",
                "podIP": "172.18.0.2",
                "podIPs": [
                    {
                        "ip": "172.18.0.2"
                    }
                ],
                "startTime": "2020-10-12T14:38:45Z",
                "containerStatuses": [
                    {
                        "name": "coredns",
                        "state": {
                            "running": {
                                "startedAt": "2020-10-12T14:38:47Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "k8s.gcr.io/coredns:1.7.0",
                        "imageID": "docker-pullable://k8s.gcr.io/coredns@sha256:73ca82b4ce829766d4f1f10947c3a338888f876fbed0540dc849c89ff256e90c",
                        "containerID": "docker://081f8286de3ab251c990e87c45c77512a3ca186c50e086d715d28c7fff12ac57",
                        "started": true
                    }
                ],
                "qosClass": "Burstable"
            }
        },
        {
            "metadata": {
                "name": "etcd-minikube",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/pods/etcd-minikube",
                "uid": "4156357f-b0ca-4af7-8c6f-d9a4945ead9b",
                "resourceVersion": "450",
                "creationTimestamp": "2020-10-12T14:38:26Z",
                "labels": {
                    "component": "etcd",
                    "tier": "control-plane"
                },
                "annotations": {
                    "kubeadm.kubernetes.io/etcd.advertise-client-urls": "https://172.17.0.3:2379",
                    "kubernetes.io/config.hash": "e0668cbc7e621e100dcf55115e3a4025",
                    "kubernetes.io/config.mirror": "e0668cbc7e621e100dcf55115e3a4025",
                    "kubernetes.io/config.seen": "2020-10-12T14:38:19.630158052Z",
                    "kubernetes.io/config.source": "file"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "v1",
                        "kind": "Node",
                        "name": "minikube",
                        "uid": "82eb58ef-87ae-4277-a47b-df643d8aee56",
                        "controller": true
                    }
                ],
                "managedFields": [
                    {
                        "manager": "kubelet",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-10-12T14:39:40Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    ".": {},
                                    "f:kubeadm.kubernetes.io/etcd.advertise-client-urls": {},
                                    "f:kubernetes.io/config.hash": {},
                                    "f:kubernetes.io/config.mirror": {},
                                    "f:kubernetes.io/config.seen": {},
                                    "f:kubernetes.io/config.source": {}
                                },
                                "f:labels": {
                                    ".": {},
                                    "f:component": {},
                                    "f:tier": {}
                                },
                                "f:ownerReferences": {
                                    ".": {},
                                    "k:{\"uid\":\"82eb58ef-87ae-4277-a47b-df643d8aee56\"}": {
                                        ".": {},
                                        "f:apiVersion": {},
                                        "f:controller": {},
                                        "f:kind": {},
                                        "f:name": {},
                                        "f:uid": {}
                                    }
                                }
                            },
                            "f:spec": {
                                "f:containers": {
                                    "k:{\"name\":\"etcd\"}": {
                                        ".": {},
                                        "f:command": {},
                                        "f:image": {},
                                        "f:imagePullPolicy": {},
                                        "f:livenessProbe": {
                                            ".": {},
                                            "f:failureThreshold": {},
                                            "f:httpGet": {
                                                ".": {},
                                                "f:host": {},
                                                "f:path": {},
                                                "f:port": {},
                                                "f:scheme": {}
                                            },
                                            "f:initialDelaySeconds": {},
                                            "f:periodSeconds": {},
                                            "f:successThreshold": {},
                                            "f:timeoutSeconds": {}
                                        },
                                        "f:name": {},
                                        "f:resources": {},
                                        "f:startupProbe": {
                                            ".": {},
                                            "f:failureThreshold": {},
                                            "f:httpGet": {
                                                ".": {},
                                                "f:host": {},
                                                "f:path": {},
                                                "f:port": {},
                                                "f:scheme": {}
                                            },
                                            "f:initialDelaySeconds": {},
                                            "f:periodSeconds": {},
                                            "f:successThreshold": {},
                                            "f:timeoutSeconds": {}
                                        },
                                        "f:terminationMessagePath": {},
                                        "f:terminationMessagePolicy": {},
                                        "f:volumeMounts": {
                                            ".": {},
                                            "k:{\"mountPath\":\"/var/lib/minikube/certs/etcd\"}": {
                                                ".": {},
                                                "f:mountPath": {},
                                                "f:name": {}
                                            },
                                            "k:{\"mountPath\":\"/var/lib/minikube/etcd\"}": {
                                                ".": {},
                                                "f:mountPath": {},
                                                "f:name": {}
                                            }
                                        }
                                    }
                                },
                                "f:dnsPolicy": {},
                                "f:enableServiceLinks": {},
                                "f:hostNetwork": {},
                                "f:nodeName": {},
                                "f:priorityClassName": {},
                                "f:restartPolicy": {},
                                "f:schedulerName": {},
                                "f:securityContext": {},
                                "f:terminationGracePeriodSeconds": {},
                                "f:tolerations": {},
                                "f:volumes": {
                                    ".": {},
                                    "k:{\"name\":\"etcd-certs\"}": {
                                        ".": {},
                                        "f:hostPath": {
                                            ".": {},
                                            "f:path": {},
                                            "f:type": {}
                                        },
                                        "f:name": {}
                                    },
                                    "k:{\"name\":\"etcd-data\"}": {
                                        ".": {},
                                        "f:hostPath": {
                                            ".": {},
                                            "f:path": {},
                                            "f:type": {}
                                        },
                                        "f:name": {}
                                    }
                                }
                            },
                            "f:status": {
                                "f:conditions": {
                                    ".": {},
                                    "k:{\"type\":\"ContainersReady\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Initialized\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"PodScheduled\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Ready\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    }
                                },
                                "f:containerStatuses": {},
                                "f:hostIP": {},
                                "f:phase": {},
                                "f:podIP": {},
                                "f:podIPs": {
                                    ".": {},
                                    "k:{\"ip\":\"172.17.0.3\"}": {
                                        ".": {},
                                        "f:ip": {}
                                    }
                                },
                                "f:startTime": {}
                            }
                        }
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "etcd-certs",
                        "hostPath": {
                            "path": "/var/lib/minikube/certs/etcd",
                            "type": "DirectoryOrCreate"
                        }
                    },
                    {
                        "name": "etcd-data",
                        "hostPath": {
                            "path": "/var/lib/minikube/etcd",
                            "type": "DirectoryOrCreate"
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "etcd",
                        "image": "k8s.gcr.io/etcd:3.4.13-0",
                        "command": [
                            "etcd",
                            "--advertise-client-urls=https://172.17.0.3:2379",
                            "--cert-file=/var/lib/minikube/certs/etcd/server.crt",
                            "--client-cert-auth=true",
                            "--data-dir=/var/lib/minikube/etcd",
                            "--initial-advertise-peer-urls=https://172.17.0.3:2380",
                            "--initial-cluster=minikube=https://172.17.0.3:2380",
                            "--key-file=/var/lib/minikube/certs/etcd/server.key",
                            "--listen-client-urls=https://127.0.0.1:2379,https://172.17.0.3:2379",
                            "--listen-metrics-urls=http://127.0.0.1:2381",
                            "--listen-peer-urls=https://172.17.0.3:2380",
                            "--name=minikube",
                            "--peer-cert-file=/var/lib/minikube/certs/etcd/peer.crt",
                            "--peer-client-cert-auth=true",
                            "--peer-key-file=/var/lib/minikube/certs/etcd/peer.key",
                            "--peer-trusted-ca-file=/var/lib/minikube/certs/etcd/ca.crt",
                            "--proxy-refresh-interval=70000",
                            "--snapshot-count=10000",
                            "--trusted-ca-file=/var/lib/minikube/certs/etcd/ca.crt"
                        ],
                        "resources": {},
                        "volumeMounts": [
                            {
                                "name": "etcd-data",
                                "mountPath": "/var/lib/minikube/etcd"
                            },
                            {
                                "name": "etcd-certs",
                                "mountPath": "/var/lib/minikube/certs/etcd"
                            }
                        ],
                        "livenessProbe": {
                            "httpGet": {
                                "path": "/health",
                                "port": 2381,
                                "host": "127.0.0.1",
                                "scheme": "HTTP"
                            },
                            "initialDelaySeconds": 10,
                            "timeoutSeconds": 15,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 8
                        },
                        "startupProbe": {
                            "httpGet": {
                                "path": "/health",
                                "port": 2381,
                                "host": "127.0.0.1",
                                "scheme": "HTTP"
                            },
                            "initialDelaySeconds": 10,
                            "timeoutSeconds": 15,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 24
                        },
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "ClusterFirst",
                "nodeName": "minikube",
                "hostNetwork": true,
                "securityContext": {},
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "operator": "Exists",
                        "effect": "NoExecute"
                    }
                ],
                "priorityClassName": "system-node-critical",
                "priority": 2000001000,
                "enableServiceLinks": true,
                "preemptionPolicy": "PreemptLowerPriority"
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-10-12T14:38:26Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-10-12T14:39:40Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-10-12T14:39:40Z"
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-10-12T14:38:26Z"
                    }
                ],
                "hostIP": "172.17.0.3",
                "podIP": "172.17.0.3",
                "podIPs": [
                    {
                        "ip": "172.17.0.3"
                    }
                ],
                "startTime": "2020-10-12T14:38:26Z",
                "containerStatuses": [
                    {
                        "name": "etcd",
                        "state": {
                            "running": {
                                "startedAt": "2020-10-12T14:38:07Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "k8s.gcr.io/etcd:3.4.13-0",
                        "imageID": "docker-pullable://k8s.gcr.io/etcd@sha256:4ad90a11b55313b182afc186b9876c8e891531b8db4c9bf1541953021618d0e2",
                        "containerID": "docker://28b6c72b5ea7224c11103dc35f9fae7338fc10e5ff6311af366ec516f8366956",
                        "started": true
                    }
                ],
                "qosClass": "BestEffort"
            }
        },
        {
            "metadata": {
                "name": "kube-apiserver-minikube",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/pods/kube-apiserver-minikube",
                "uid": "85328733-f209-4adb-90ed-a8ef930ce8e9",
                "resourceVersion": "378",
                "creationTimestamp": "2020-10-12T14:38:26Z",
                "labels": {
                    "component": "kube-apiserver",
                    "tier": "control-plane"
                },
                "annotations": {
                    "kubeadm.kubernetes.io/kube-apiserver.advertise-address.endpoint": "172.17.0.3:8443",
                    "kubernetes.io/config.hash": "6420297fbd837372c0c69d6daa60b210",
                    "kubernetes.io/config.mirror": "6420297fbd837372c0c69d6daa60b210",
                    "kubernetes.io/config.seen": "2020-10-12T14:38:19.630168690Z",
                    "kubernetes.io/config.source": "file"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "v1",
                        "kind": "Node",
                        "name": "minikube",
                        "uid": "82eb58ef-87ae-4277-a47b-df643d8aee56",
                        "controller": true
                    }
                ],
                "managedFields": [
                    {
                        "manager": "kubelet",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-10-12T14:38:29Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    ".": {},
                                    "f:kubeadm.kubernetes.io/kube-apiserver.advertise-address.endpoint": {},
                                    "f:kubernetes.io/config.hash": {},
                                    "f:kubernetes.io/config.mirror": {},
                                    "f:kubernetes.io/config.seen": {},
                                    "f:kubernetes.io/config.source": {}
                                },
                                "f:labels": {
                                    ".": {},
                                    "f:component": {},
                                    "f:tier": {}
                                },
                                "f:ownerReferences": {
                                    ".": {},
                                    "k:{\"uid\":\"82eb58ef-87ae-4277-a47b-df643d8aee56\"}": {
                                        ".": {},
                                        "f:apiVersion": {},
                                        "f:controller": {},
                                        "f:kind": {},
                                        "f:name": {},
                                        "f:uid": {}
                                    }
                                }
                            },
                            "f:spec": {
                                "f:containers": {
                                    "k:{\"name\":\"kube-apiserver\"}": {
                                        ".": {},
                                        "f:command": {},
                                        "f:image": {},
                                        "f:imagePullPolicy": {},
                                        "f:livenessProbe": {
                                            ".": {},
                                            "f:failureThreshold": {},
                                            "f:httpGet": {
                                                ".": {},
                                                "f:host": {},
                                                "f:path": {},
                                                "f:port": {},
                                                "f:scheme": {}
                                            },
                                            "f:initialDelaySeconds": {},
                                            "f:periodSeconds": {},
                                            "f:successThreshold": {},
                                            "f:timeoutSeconds": {}
                                        },
                                        "f:name": {},
                                        "f:readinessProbe": {
                                            ".": {},
                                            "f:failureThreshold": {},
                                            "f:httpGet": {
                                                ".": {},
                                                "f:host": {},
                                                "f:path": {},
                                                "f:port": {},
                                                "f:scheme": {}
                                            },
                                            "f:periodSeconds": {},
                                            "f:successThreshold": {},
                                            "f:timeoutSeconds": {}
                                        },
                                        "f:resources": {
                                            ".": {},
                                            "f:requests": {
                                                ".": {},
                                                "f:cpu": {}
                                            }
                                        },
                                        "f:startupProbe": {
                                            ".": {},
                                            "f:failureThreshold": {},
                                            "f:httpGet": {
                                                ".": {},
                                                "f:host": {},
                                                "f:path": {},
                                                "f:port": {},
                                                "f:scheme": {}
                                            },
                                            "f:initialDelaySeconds": {},
                                            "f:periodSeconds": {},
                                            "f:successThreshold": {},
                                            "f:timeoutSeconds": {}
                                        },
                                        "f:terminationMessagePath": {},
                                        "f:terminationMessagePolicy": {},
                                        "f:volumeMounts": {
                                            ".": {},
                                            "k:{\"mountPath\":\"/etc/ca-certificates\"}": {
                                                ".": {},
                                                "f:mountPath": {},
                                                "f:name": {},
                                                "f:readOnly": {}
                                            },
                                            "k:{\"mountPath\":\"/etc/ssl/certs\"}": {
                                                ".": {},
                                                "f:mountPath": {},
                                                "f:name": {},
                                                "f:readOnly": {}
                                            },
                                            "k:{\"mountPath\":\"/usr/local/share/ca-certificates\"}": {
                                                ".": {},
                                                "f:mountPath": {},
                                                "f:name": {},
                                                "f:readOnly": {}
                                            },
                                            "k:{\"mountPath\":\"/usr/share/ca-certificates\"}": {
                                                ".": {},
                                                "f:mountPath": {},
                                                "f:name": {},
                                                "f:readOnly": {}
                                            },
                                            "k:{\"mountPath\":\"/var/lib/minikube/certs\"}": {
                                                ".": {},
                                                "f:mountPath": {},
                                                "f:name": {},
                                                "f:readOnly": {}
                                            }
                                        }
                                    }
                                },
                                "f:dnsPolicy": {},
                                "f:enableServiceLinks": {},
                                "f:hostNetwork": {},
                                "f:nodeName": {},
                                "f:priorityClassName": {},
                                "f:restartPolicy": {},
                                "f:schedulerName": {},
                                "f:securityContext": {},
                                "f:terminationGracePeriodSeconds": {},
                                "f:tolerations": {},
                                "f:volumes": {
                                    ".": {},
                                    "k:{\"name\":\"ca-certs\"}": {
                                        ".": {},
                                        "f:hostPath": {
                                            ".": {},
                                            "f:path": {},
                                            "f:type": {}
                                        },
                                        "f:name": {}
                                    },
                                    "k:{\"name\":\"etc-ca-certificates\"}": {
                                        ".": {},
                                        "f:hostPath": {
                                            ".": {},
                                            "f:path": {},
                                            "f:type": {}
                                        },
                                        "f:name": {}
                                    },
                                    "k:{\"name\":\"k8s-certs\"}": {
                                        ".": {},
                                        "f:hostPath": {
                                            ".": {},
                                            "f:path": {},
                                            "f:type": {}
                                        },
                                        "f:name": {}
                                    },
                                    "k:{\"name\":\"usr-local-share-ca-certificates\"}": {
                                        ".": {},
                                        "f:hostPath": {
                                            ".": {},
                                            "f:path": {},
                                            "f:type": {}
                                        },
                                        "f:name": {}
                                    },
                                    "k:{\"name\":\"usr-share-ca-certificates\"}": {
                                        ".": {},
                                        "f:hostPath": {
                                            ".": {},
                                            "f:path": {},
                                            "f:type": {}
                                        },
                                        "f:name": {}
                                    }
                                }
                            },
                            "f:status": {
                                "f:conditions": {
                                    ".": {},
                                    "k:{\"type\":\"ContainersReady\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Initialized\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"PodScheduled\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Ready\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    }
                                },
                                "f:containerStatuses": {},
                                "f:hostIP": {},
                                "f:phase": {},
                                "f:podIP": {},
                                "f:podIPs": {
                                    ".": {},
                                    "k:{\"ip\":\"172.17.0.3\"}": {
                                        ".": {},
                                        "f:ip": {}
                                    }
                                },
                                "f:startTime": {}
                            }
                        }
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "ca-certs",
                        "hostPath": {
                            "path": "/etc/ssl/certs",
                            "type": "DirectoryOrCreate"
                        }
                    },
                    {
                        "name": "etc-ca-certificates",
                        "hostPath": {
                            "path": "/etc/ca-certificates",
                            "type": "DirectoryOrCreate"
                        }
                    },
                    {
                        "name": "k8s-certs",
                        "hostPath": {
                            "path": "/var/lib/minikube/certs",
                            "type": "DirectoryOrCreate"
                        }
                    },
                    {
                        "name": "usr-local-share-ca-certificates",
                        "hostPath": {
                            "path": "/usr/local/share/ca-certificates",
                            "type": "DirectoryOrCreate"
                        }
                    },
                    {
                        "name": "usr-share-ca-certificates",
                        "hostPath": {
                            "path": "/usr/share/ca-certificates",
                            "type": "DirectoryOrCreate"
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "kube-apiserver",
                        "image": "k8s.gcr.io/kube-apiserver:v1.19.2",
                        "command": [
                            "kube-apiserver",
                            "--advertise-address=172.17.0.3",
                            "--allow-privileged=true",
                            "--authorization-mode=Node,RBAC",
                            "--client-ca-file=/var/lib/minikube/certs/ca.crt",
                            "--enable-admission-plugins=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,NodeRestriction,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota",
                            "--enable-bootstrap-token-auth=true",
                            "--etcd-cafile=/var/lib/minikube/certs/etcd/ca.crt",
                            "--etcd-certfile=/var/lib/minikube/certs/apiserver-etcd-client.crt",
                            "--etcd-keyfile=/var/lib/minikube/certs/apiserver-etcd-client.key",
                            "--etcd-servers=https://127.0.0.1:2379",
                            "--insecure-port=0",
                            "--kubelet-client-certificate=/var/lib/minikube/certs/apiserver-kubelet-client.crt",
                            "--kubelet-client-key=/var/lib/minikube/certs/apiserver-kubelet-client.key",
                            "--kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname",
                            "--proxy-client-cert-file=/var/lib/minikube/certs/front-proxy-client.crt",
                            "--proxy-client-key-file=/var/lib/minikube/certs/front-proxy-client.key",
                            "--requestheader-allowed-names=front-proxy-client",
                            "--requestheader-client-ca-file=/var/lib/minikube/certs/front-proxy-ca.crt",
                            "--requestheader-extra-headers-prefix=X-Remote-Extra-",
                            "--requestheader-group-headers=X-Remote-Group",
                            "--requestheader-username-headers=X-Remote-User",
                            "--secure-port=8443",
                            "--service-account-key-file=/var/lib/minikube/certs/sa.pub",
                            "--service-cluster-ip-range=10.96.0.0/12",
                            "--tls-cert-file=/var/lib/minikube/certs/apiserver.crt",
                            "--tls-private-key-file=/var/lib/minikube/certs/apiserver.key"
                        ],
                        "resources": {
                            "requests": {
                                "cpu": "250m"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "ca-certs",
                                "readOnly": true,
                                "mountPath": "/etc/ssl/certs"
                            },
                            {
                                "name": "etc-ca-certificates",
                                "readOnly": true,
                                "mountPath": "/etc/ca-certificates"
                            },
                            {
                                "name": "k8s-certs",
                                "readOnly": true,
                                "mountPath": "/var/lib/minikube/certs"
                            },
                            {
                                "name": "usr-local-share-ca-certificates",
                                "readOnly": true,
                                "mountPath": "/usr/local/share/ca-certificates"
                            },
                            {
                                "name": "usr-share-ca-certificates",
                                "readOnly": true,
                                "mountPath": "/usr/share/ca-certificates"
                            }
                        ],
                        "livenessProbe": {
                            "httpGet": {
                                "path": "/livez",
                                "port": 8443,
                                "host": "172.17.0.3",
                                "scheme": "HTTPS"
                            },
                            "initialDelaySeconds": 10,
                            "timeoutSeconds": 15,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 8
                        },
                        "readinessProbe": {
                            "httpGet": {
                                "path": "/readyz",
                                "port": 8443,
                                "host": "172.17.0.3",
                                "scheme": "HTTPS"
                            },
                            "timeoutSeconds": 15,
                            "periodSeconds": 1,
                            "successThreshold": 1,
                            "failureThreshold": 3
                        },
                        "startupProbe": {
                            "httpGet": {
                                "path": "/livez",
                                "port": 8443,
                                "host": "172.17.0.3",
                                "scheme": "HTTPS"
                            },
                            "initialDelaySeconds": 10,
                            "timeoutSeconds": 15,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 24
                        },
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "ClusterFirst",
                "nodeName": "minikube",
                "hostNetwork": true,
                "securityContext": {},
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "operator": "Exists",
                        "effect": "NoExecute"
                    }
                ],
                "priorityClassName": "system-node-critical",
                "priority": 2000001000,
                "enableServiceLinks": true,
                "preemptionPolicy": "PreemptLowerPriority"
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-10-12T14:38:27Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-10-12T14:38:29Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-10-12T14:38:29Z"
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-10-12T14:38:27Z"
                    }
                ],
                "hostIP": "172.17.0.3",
                "podIP": "172.17.0.3",
                "podIPs": [
                    {
                        "ip": "172.17.0.3"
                    }
                ],
                "startTime": "2020-10-12T14:38:27Z",
                "containerStatuses": [
                    {
                        "name": "kube-apiserver",
                        "state": {
                            "running": {
                                "startedAt": "2020-10-12T14:38:07Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "k8s.gcr.io/kube-apiserver:v1.19.2",
                        "imageID": "docker-pullable://k8s.gcr.io/kube-apiserver@sha256:fc905eab708c6abbdf0ef0d47667592b948fea3adf31d71b19b5205340d00011",
                        "containerID": "docker://5d98c7b4bb47d51430e7005795615f0f61c75908fb4990fa46bd88ac65104877",
                        "started": true
                    }
                ],
                "qosClass": "Burstable"
            }
        },
        {
            "metadata": {
                "name": "kube-controller-manager-minikube",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/pods/kube-controller-manager-minikube",
                "uid": "12cc37f8-4aec-4cd9-a731-03d076b09a6c",
                "resourceVersion": "374",
                "creationTimestamp": "2020-10-12T14:38:26Z",
                "labels": {
                    "component": "kube-controller-manager",
                    "tier": "control-plane"
                },
                "annotations": {
                    "kubernetes.io/config.hash": "dcc127c185c80a61d90d8e659e768641",
                    "kubernetes.io/config.mirror": "dcc127c185c80a61d90d8e659e768641",
                    "kubernetes.io/config.seen": "2020-10-12T14:38:19.630171884Z",
                    "kubernetes.io/config.source": "file"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "v1",
                        "kind": "Node",
                        "name": "minikube",
                        "uid": "82eb58ef-87ae-4277-a47b-df643d8aee56",
                        "controller": true
                    }
                ],
                "managedFields": [
                    {
                        "manager": "kubelet",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-10-12T14:38:28Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    ".": {},
                                    "f:kubernetes.io/config.hash": {},
                                    "f:kubernetes.io/config.mirror": {},
                                    "f:kubernetes.io/config.seen": {},
                                    "f:kubernetes.io/config.source": {}
                                },
                                "f:labels": {
                                    ".": {},
                                    "f:component": {},
                                    "f:tier": {}
                                },
                                "f:ownerReferences": {
                                    ".": {},
                                    "k:{\"uid\":\"82eb58ef-87ae-4277-a47b-df643d8aee56\"}": {
                                        ".": {},
                                        "f:apiVersion": {},
                                        "f:controller": {},
                                        "f:kind": {},
                                        "f:name": {},
                                        "f:uid": {}
                                    }
                                }
                            },
                            "f:spec": {
                                "f:containers": {
                                    "k:{\"name\":\"kube-controller-manager\"}": {
                                        ".": {},
                                        "f:command": {},
                                        "f:image": {},
                                        "f:imagePullPolicy": {},
                                        "f:livenessProbe": {
                                            ".": {},
                                            "f:failureThreshold": {},
                                            "f:httpGet": {
                                                ".": {},
                                                "f:host": {},
                                                "f:path": {},
                                                "f:port": {},
                                                "f:scheme": {}
                                            },
                                            "f:initialDelaySeconds": {},
                                            "f:periodSeconds": {},
                                            "f:successThreshold": {},
                                            "f:timeoutSeconds": {}
                                        },
                                        "f:name": {},
                                        "f:resources": {
                                            ".": {},
                                            "f:requests": {
                                                ".": {},
                                                "f:cpu": {}
                                            }
                                        },
                                        "f:startupProbe": {
                                            ".": {},
                                            "f:failureThreshold": {},
                                            "f:httpGet": {
                                                ".": {},
                                                "f:host": {},
                                                "f:path": {},
                                                "f:port": {},
                                                "f:scheme": {}
                                            },
                                            "f:initialDelaySeconds": {},
                                            "f:periodSeconds": {},
                                            "f:successThreshold": {},
                                            "f:timeoutSeconds": {}
                                        },
                                        "f:terminationMessagePath": {},
                                        "f:terminationMessagePolicy": {},
                                        "f:volumeMounts": {
                                            ".": {},
                                            "k:{\"mountPath\":\"/etc/ca-certificates\"}": {
                                                ".": {},
                                                "f:mountPath": {},
                                                "f:name": {},
                                                "f:readOnly": {}
                                            },
                                            "k:{\"mountPath\":\"/etc/kubernetes/controller-manager.conf\"}": {
                                                ".": {},
                                                "f:mountPath": {},
                                                "f:name": {},
                                                "f:readOnly": {}
                                            },
                                            "k:{\"mountPath\":\"/etc/ssl/certs\"}": {
                                                ".": {},
                                                "f:mountPath": {},
                                                "f:name": {},
                                                "f:readOnly": {}
                                            },
                                            "k:{\"mountPath\":\"/usr/libexec/kubernetes/kubelet-plugins/volume/exec\"}": {
                                                ".": {},
                                                "f:mountPath": {},
                                                "f:name": {}
                                            },
                                            "k:{\"mountPath\":\"/usr/local/share/ca-certificates\"}": {
                                                ".": {},
                                                "f:mountPath": {},
                                                "f:name": {},
                                                "f:readOnly": {}
                                            },
                                            "k:{\"mountPath\":\"/usr/share/ca-certificates\"}": {
                                                ".": {},
                                                "f:mountPath": {},
                                                "f:name": {},
                                                "f:readOnly": {}
                                            },
                                            "k:{\"mountPath\":\"/var/lib/minikube/certs\"}": {
                                                ".": {},
                                                "f:mountPath": {},
                                                "f:name": {},
                                                "f:readOnly": {}
                                            }
                                        }
                                    }
                                },
                                "f:dnsPolicy": {},
                                "f:enableServiceLinks": {},
                                "f:hostNetwork": {},
                                "f:nodeName": {},
                                "f:priorityClassName": {},
                                "f:restartPolicy": {},
                                "f:schedulerName": {},
                                "f:securityContext": {},
                                "f:terminationGracePeriodSeconds": {},
                                "f:tolerations": {},
                                "f:volumes": {
                                    ".": {},
                                    "k:{\"name\":\"ca-certs\"}": {
                                        ".": {},
                                        "f:hostPath": {
                                            ".": {},
                                            "f:path": {},
                                            "f:type": {}
                                        },
                                        "f:name": {}
                                    },
                                    "k:{\"name\":\"etc-ca-certificates\"}": {
                                        ".": {},
                                        "f:hostPath": {
                                            ".": {},
                                            "f:path": {},
                                            "f:type": {}
                                        },
                                        "f:name": {}
                                    },
                                    "k:{\"name\":\"flexvolume-dir\"}": {
                                        ".": {},
                                        "f:hostPath": {
                                            ".": {},
                                            "f:path": {},
                                            "f:type": {}
                                        },
                                        "f:name": {}
                                    },
                                    "k:{\"name\":\"k8s-certs\"}": {
                                        ".": {},
                                        "f:hostPath": {
                                            ".": {},
                                            "f:path": {},
                                            "f:type": {}
                                        },
                                        "f:name": {}
                                    },
                                    "k:{\"name\":\"kubeconfig\"}": {
                                        ".": {},
                                        "f:hostPath": {
                                            ".": {},
                                            "f:path": {},
                                            "f:type": {}
                                        },
                                        "f:name": {}
                                    },
                                    "k:{\"name\":\"usr-local-share-ca-certificates\"}": {
                                        ".": {},
                                        "f:hostPath": {
                                            ".": {},
                                            "f:path": {},
                                            "f:type": {}
                                        },
                                        "f:name": {}
                                    },
                                    "k:{\"name\":\"usr-share-ca-certificates\"}": {
                                        ".": {},
                                        "f:hostPath": {
                                            ".": {},
                                            "f:path": {},
                                            "f:type": {}
                                        },
                                        "f:name": {}
                                    }
                                }
                            },
                            "f:status": {
                                "f:conditions": {
                                    ".": {},
                                    "k:{\"type\":\"ContainersReady\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Initialized\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"PodScheduled\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Ready\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    }
                                },
                                "f:containerStatuses": {},
                                "f:hostIP": {},
                                "f:phase": {},
                                "f:podIP": {},
                                "f:podIPs": {
                                    ".": {},
                                    "k:{\"ip\":\"172.17.0.3\"}": {
                                        ".": {},
                                        "f:ip": {}
                                    }
                                },
                                "f:startTime": {}
                            }
                        }
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "ca-certs",
                        "hostPath": {
                            "path": "/etc/ssl/certs",
                            "type": "DirectoryOrCreate"
                        }
                    },
                    {
                        "name": "etc-ca-certificates",
                        "hostPath": {
                            "path": "/etc/ca-certificates",
                            "type": "DirectoryOrCreate"
                        }
                    },
                    {
                        "name": "flexvolume-dir",
                        "hostPath": {
                            "path": "/usr/libexec/kubernetes/kubelet-plugins/volume/exec",
                            "type": "DirectoryOrCreate"
                        }
                    },
                    {
                        "name": "k8s-certs",
                        "hostPath": {
                            "path": "/var/lib/minikube/certs",
                            "type": "DirectoryOrCreate"
                        }
                    },
                    {
                        "name": "kubeconfig",
                        "hostPath": {
                            "path": "/etc/kubernetes/controller-manager.conf",
                            "type": "FileOrCreate"
                        }
                    },
                    {
                        "name": "usr-local-share-ca-certificates",
                        "hostPath": {
                            "path": "/usr/local/share/ca-certificates",
                            "type": "DirectoryOrCreate"
                        }
                    },
                    {
                        "name": "usr-share-ca-certificates",
                        "hostPath": {
                            "path": "/usr/share/ca-certificates",
                            "type": "DirectoryOrCreate"
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "kube-controller-manager",
                        "image": "k8s.gcr.io/kube-controller-manager:v1.19.2",
                        "command": [
                            "kube-controller-manager",
                            "--authentication-kubeconfig=/etc/kubernetes/controller-manager.conf",
                            "--authorization-kubeconfig=/etc/kubernetes/controller-manager.conf",
                            "--bind-address=127.0.0.1",
                            "--client-ca-file=/var/lib/minikube/certs/ca.crt",
                            "--cluster-name=mk",
                            "--cluster-signing-cert-file=/var/lib/minikube/certs/ca.crt",
                            "--cluster-signing-key-file=/var/lib/minikube/certs/ca.key",
                            "--controllers=*,bootstrapsigner,tokencleaner",
                            "--kubeconfig=/etc/kubernetes/controller-manager.conf",
                            "--leader-elect=false",
                            "--port=0",
                            "--requestheader-client-ca-file=/var/lib/minikube/certs/front-proxy-ca.crt",
                            "--root-ca-file=/var/lib/minikube/certs/ca.crt",
                            "--service-account-private-key-file=/var/lib/minikube/certs/sa.key",
                            "--use-service-account-credentials=true"
                        ],
                        "resources": {
                            "requests": {
                                "cpu": "200m"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "ca-certs",
                                "readOnly": true,
                                "mountPath": "/etc/ssl/certs"
                            },
                            {
                                "name": "etc-ca-certificates",
                                "readOnly": true,
                                "mountPath": "/etc/ca-certificates"
                            },
                            {
                                "name": "flexvolume-dir",
                                "mountPath": "/usr/libexec/kubernetes/kubelet-plugins/volume/exec"
                            },
                            {
                                "name": "k8s-certs",
                                "readOnly": true,
                                "mountPath": "/var/lib/minikube/certs"
                            },
                            {
                                "name": "kubeconfig",
                                "readOnly": true,
                                "mountPath": "/etc/kubernetes/controller-manager.conf"
                            },
                            {
                                "name": "usr-local-share-ca-certificates",
                                "readOnly": true,
                                "mountPath": "/usr/local/share/ca-certificates"
                            },
                            {
                                "name": "usr-share-ca-certificates",
                                "readOnly": true,
                                "mountPath": "/usr/share/ca-certificates"
                            }
                        ],
                        "livenessProbe": {
                            "httpGet": {
                                "path": "/healthz",
                                "port": 10257,
                                "host": "127.0.0.1",
                                "scheme": "HTTPS"
                            },
                            "initialDelaySeconds": 10,
                            "timeoutSeconds": 15,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 8
                        },
                        "startupProbe": {
                            "httpGet": {
                                "path": "/healthz",
                                "port": 10257,
                                "host": "127.0.0.1",
                                "scheme": "HTTPS"
                            },
                            "initialDelaySeconds": 10,
                            "timeoutSeconds": 15,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 24
                        },
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "ClusterFirst",
                "nodeName": "minikube",
                "hostNetwork": true,
                "securityContext": {},
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "operator": "Exists",
                        "effect": "NoExecute"
                    }
                ],
                "priorityClassName": "system-node-critical",
                "priority": 2000001000,
                "enableServiceLinks": true,
                "preemptionPolicy": "PreemptLowerPriority"
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-10-12T14:38:26Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-10-12T14:38:27Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-10-12T14:38:27Z"
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-10-12T14:38:26Z"
                    }
                ],
                "hostIP": "172.17.0.3",
                "podIP": "172.17.0.3",
                "podIPs": [
                    {
                        "ip": "172.17.0.3"
                    }
                ],
                "startTime": "2020-10-12T14:38:26Z",
                "containerStatuses": [
                    {
                        "name": "kube-controller-manager",
                        "state": {
                            "running": {
                                "startedAt": "2020-10-12T14:38:07Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "k8s.gcr.io/kube-controller-manager:v1.19.2",
                        "imageID": "docker-pullable://k8s.gcr.io/kube-controller-manager@sha256:c94b98d9f79bdfe33010c313891d99ed50858d6f04ceef865e7904c338dad913",
                        "containerID": "docker://3d8ed4b3bb365c12889c062cbe41bd95e7bc169b200e003e0228b46be092a36d",
                        "started": true
                    }
                ],
                "qosClass": "Burstable"
            }
        },
        {
            "metadata": {
                "name": "kube-proxy-qwt4m",
                "generateName": "kube-proxy-",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/pods/kube-proxy-qwt4m",
                "uid": "6329ecf2-6bd2-428d-a400-1d9f14ca48d7",
                "resourceVersion": "375",
                "creationTimestamp": "2020-10-12T14:38:24Z",
                "labels": {
                    "controller-revision-hash": "744c595cb",
                    "k8s-app": "kube-proxy",
                    "pod-template-generation": "1"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "DaemonSet",
                        "name": "kube-proxy",
                        "uid": "a689441f-2658-4607-a2ed-03b3e43c59d1",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ],
                "managedFields": [
                    {
                        "manager": "kube-controller-manager",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-10-12T14:38:24Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:generateName": {},
                                "f:labels": {
                                    ".": {},
                                    "f:controller-revision-hash": {},
                                    "f:k8s-app": {},
                                    "f:pod-template-generation": {}
                                },
                                "f:ownerReferences": {
                                    ".": {},
                                    "k:{\"uid\":\"a689441f-2658-4607-a2ed-03b3e43c59d1\"}": {
                                        ".": {},
                                        "f:apiVersion": {},
                                        "f:blockOwnerDeletion": {},
                                        "f:controller": {},
                                        "f:kind": {},
                                        "f:name": {},
                                        "f:uid": {}
                                    }
                                }
                            },
                            "f:spec": {
                                "f:affinity": {
                                    ".": {},
                                    "f:nodeAffinity": {
                                        ".": {},
                                        "f:requiredDuringSchedulingIgnoredDuringExecution": {
                                            ".": {},
                                            "f:nodeSelectorTerms": {}
                                        }
                                    }
                                },
                                "f:containers": {
                                    "k:{\"name\":\"kube-proxy\"}": {
                                        ".": {},
                                        "f:command": {},
                                        "f:env": {
                                            ".": {},
                                            "k:{\"name\":\"NODE_NAME\"}": {
                                                ".": {},
                                                "f:name": {},
                                                "f:valueFrom": {
                                                    ".": {},
                                                    "f:fieldRef": {
                                                        ".": {},
                                                        "f:apiVersion": {},
                                                        "f:fieldPath": {}
                                                    }
                                                }
                                            }
                                        },
                                        "f:image": {},
                                        "f:imagePullPolicy": {},
                                        "f:name": {},
                                        "f:resources": {},
                                        "f:securityContext": {
                                            ".": {},
                                            "f:privileged": {}
                                        },
                                        "f:terminationMessagePath": {},
                                        "f:terminationMessagePolicy": {},
                                        "f:volumeMounts": {
                                            ".": {},
                                            "k:{\"mountPath\":\"/lib/modules\"}": {
                                                ".": {},
                                                "f:mountPath": {},
                                                "f:name": {},
                                                "f:readOnly": {}
                                            },
                                            "k:{\"mountPath\":\"/run/xtables.lock\"}": {
                                                ".": {},
                                                "f:mountPath": {},
                                                "f:name": {}
                                            },
                                            "k:{\"mountPath\":\"/var/lib/kube-proxy\"}": {
                                                ".": {},
                                                "f:mountPath": {},
                                                "f:name": {}
                                            }
                                        }
                                    }
                                },
                                "f:dnsPolicy": {},
                                "f:enableServiceLinks": {},
                                "f:hostNetwork": {},
                                "f:nodeSelector": {
                                    ".": {},
                                    "f:kubernetes.io/os": {}
                                },
                                "f:priorityClassName": {},
                                "f:restartPolicy": {},
                                "f:schedulerName": {},
                                "f:securityContext": {},
                                "f:serviceAccount": {},
                                "f:serviceAccountName": {},
                                "f:terminationGracePeriodSeconds": {},
                                "f:tolerations": {},
                                "f:volumes": {
                                    ".": {},
                                    "k:{\"name\":\"kube-proxy\"}": {
                                        ".": {},
                                        "f:configMap": {
                                            ".": {},
                                            "f:defaultMode": {},
                                            "f:name": {}
                                        },
                                        "f:name": {}
                                    },
                                    "k:{\"name\":\"lib-modules\"}": {
                                        ".": {},
                                        "f:hostPath": {
                                            ".": {},
                                            "f:path": {},
                                            "f:type": {}
                                        },
                                        "f:name": {}
                                    },
                                    "k:{\"name\":\"xtables-lock\"}": {
                                        ".": {},
                                        "f:hostPath": {
                                            ".": {},
                                            "f:path": {},
                                            "f:type": {}
                                        },
                                        "f:name": {}
                                    }
                                }
                            }
                        }
                    },
                    {
                        "manager": "kubelet",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-10-12T14:38:29Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:status": {
                                "f:conditions": {
                                    "k:{\"type\":\"ContainersReady\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Initialized\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Ready\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    }
                                },
                                "f:containerStatuses": {},
                                "f:hostIP": {},
                                "f:phase": {},
                                "f:podIP": {},
                                "f:podIPs": {
                                    ".": {},
                                    "k:{\"ip\":\"172.17.0.3\"}": {
                                        ".": {},
                                        "f:ip": {}
                                    }
                                },
                                "f:startTime": {}
                            }
                        }
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "kube-proxy",
                        "configMap": {
                            "name": "kube-proxy",
                            "defaultMode": 420
                        }
                    },
                    {
                        "name": "xtables-lock",
                        "hostPath": {
                            "path": "/run/xtables.lock",
                            "type": "FileOrCreate"
                        }
                    },
                    {
                        "name": "lib-modules",
                        "hostPath": {
                            "path": "/lib/modules",
                            "type": ""
                        }
                    },
                    {
                        "name": "kube-proxy-token-lh9bg",
                        "secret": {
                            "secretName": "kube-proxy-token-lh9bg",
                            "defaultMode": 420
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "kube-proxy",
                        "image": "k8s.gcr.io/kube-proxy:v1.19.2",
                        "command": [
                            "/usr/local/bin/kube-proxy",
                            "--config=/var/lib/kube-proxy/config.conf",
                            "--hostname-override=$(NODE_NAME)"
                        ],
                        "env": [
                            {
                                "name": "NODE_NAME",
                                "valueFrom": {
                                    "fieldRef": {
                                        "apiVersion": "v1",
                                        "fieldPath": "spec.nodeName"
                                    }
                                }
                            }
                        ],
                        "resources": {},
                        "volumeMounts": [
                            {
                                "name": "kube-proxy",
                                "mountPath": "/var/lib/kube-proxy"
                            },
                            {
                                "name": "xtables-lock",
                                "mountPath": "/run/xtables.lock"
                            },
                            {
                                "name": "lib-modules",
                                "readOnly": true,
                                "mountPath": "/lib/modules"
                            },
                            {
                                "name": "kube-proxy-token-lh9bg",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent",
                        "securityContext": {
                            "privileged": true
                        }
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "ClusterFirst",
                "nodeSelector": {
                    "kubernetes.io/os": "linux"
                },
                "serviceAccountName": "kube-proxy",
                "serviceAccount": "kube-proxy",
                "nodeName": "minikube",
                "hostNetwork": true,
                "securityContext": {},
                "affinity": {
                    "nodeAffinity": {
                        "requiredDuringSchedulingIgnoredDuringExecution": {
                            "nodeSelectorTerms": [
                                {
                                    "matchFields": [
                                        {
                                            "key": "metadata.name",
                                            "operator": "In",
                                            "values": [
                                                "minikube"
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                },
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "key": "CriticalAddonsOnly",
                        "operator": "Exists"
                    },
                    {
                        "operator": "Exists"
                    },
                    {
                        "key": "node.kubernetes.io/not-ready",
                        "operator": "Exists",
                        "effect": "NoExecute"
                    },
                    {
                        "key": "node.kubernetes.io/unreachable",
                        "operator": "Exists",
                        "effect": "NoExecute"
                    },
                    {
                        "key": "node.kubernetes.io/disk-pressure",
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    },
                    {
                        "key": "node.kubernetes.io/memory-pressure",
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    },
                    {
                        "key": "node.kubernetes.io/pid-pressure",
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    },
                    {
                        "key": "node.kubernetes.io/unschedulable",
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    },
                    {
                        "key": "node.kubernetes.io/network-unavailable",
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    }
                ],
                "priorityClassName": "system-node-critical",
                "priority": 2000001000,
                "enableServiceLinks": true,
                "preemptionPolicy": "PreemptLowerPriority"
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-10-12T14:38:26Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-10-12T14:38:28Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-10-12T14:38:28Z"
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-10-12T14:38:25Z"
                    }
                ],
                "hostIP": "172.17.0.3",
                "podIP": "172.17.0.3",
                "podIPs": [
                    {
                        "ip": "172.17.0.3"
                    }
                ],
                "startTime": "2020-10-12T14:38:26Z",
                "containerStatuses": [
                    {
                        "name": "kube-proxy",
                        "state": {
                            "running": {
                                "startedAt": "2020-10-12T14:38:27Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "k8s.gcr.io/kube-proxy:v1.19.2",
                        "imageID": "docker-pullable://k8s.gcr.io/kube-proxy@sha256:fa7c9d19680704e246873eb600c02fa95167d5c58e56d56ba9ed30b7c4150ac1",
                        "containerID": "docker://34245298df793358c7e545d320aaf35bc977c7809716d020ec5cb0d0c42364d4",
                        "started": true
                    }
                ],
                "qosClass": "BestEffort"
            }
        },
        {
            "metadata": {
                "name": "kube-scheduler-minikube",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/pods/kube-scheduler-minikube",
                "uid": "821c2a2b-957b-4821-8f50-573a9265eeb3",
                "resourceVersion": "453",
                "creationTimestamp": "2020-10-12T14:38:27Z",
                "labels": {
                    "component": "kube-scheduler",
                    "tier": "control-plane"
                },
                "annotations": {
                    "kubernetes.io/config.hash": "ff7d12f9e4f14e202a85a7c5534a3129",
                    "kubernetes.io/config.mirror": "ff7d12f9e4f14e202a85a7c5534a3129",
                    "kubernetes.io/config.seen": "2020-10-12T14:38:19.630174932Z",
                    "kubernetes.io/config.source": "file"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "v1",
                        "kind": "Node",
                        "name": "minikube",
                        "uid": "82eb58ef-87ae-4277-a47b-df643d8aee56",
                        "controller": true
                    }
                ],
                "managedFields": [
                    {
                        "manager": "kubelet",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-10-12T14:39:44Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    ".": {},
                                    "f:kubernetes.io/config.hash": {},
                                    "f:kubernetes.io/config.mirror": {},
                                    "f:kubernetes.io/config.seen": {},
                                    "f:kubernetes.io/config.source": {}
                                },
                                "f:labels": {
                                    ".": {},
                                    "f:component": {},
                                    "f:tier": {}
                                },
                                "f:ownerReferences": {
                                    ".": {},
                                    "k:{\"uid\":\"82eb58ef-87ae-4277-a47b-df643d8aee56\"}": {
                                        ".": {},
                                        "f:apiVersion": {},
                                        "f:controller": {},
                                        "f:kind": {},
                                        "f:name": {},
                                        "f:uid": {}
                                    }
                                }
                            },
                            "f:spec": {
                                "f:containers": {
                                    "k:{\"name\":\"kube-scheduler\"}": {
                                        ".": {},
                                        "f:command": {},
                                        "f:image": {},
                                        "f:imagePullPolicy": {},
                                        "f:livenessProbe": {
                                            ".": {},
                                            "f:failureThreshold": {},
                                            "f:httpGet": {
                                                ".": {},
                                                "f:host": {},
                                                "f:path": {},
                                                "f:port": {},
                                                "f:scheme": {}
                                            },
                                            "f:initialDelaySeconds": {},
                                            "f:periodSeconds": {},
                                            "f:successThreshold": {},
                                            "f:timeoutSeconds": {}
                                        },
                                        "f:name": {},
                                        "f:resources": {
                                            ".": {},
                                            "f:requests": {
                                                ".": {},
                                                "f:cpu": {}
                                            }
                                        },
                                        "f:startupProbe": {
                                            ".": {},
                                            "f:failureThreshold": {},
                                            "f:httpGet": {
                                                ".": {},
                                                "f:host": {},
                                                "f:path": {},
                                                "f:port": {},
                                                "f:scheme": {}
                                            },
                                            "f:initialDelaySeconds": {},
                                            "f:periodSeconds": {},
                                            "f:successThreshold": {},
                                            "f:timeoutSeconds": {}
                                        },
                                        "f:terminationMessagePath": {},
                                        "f:terminationMessagePolicy": {},
                                        "f:volumeMounts": {
                                            ".": {},
                                            "k:{\"mountPath\":\"/etc/kubernetes/scheduler.conf\"}": {
                                                ".": {},
                                                "f:mountPath": {},
                                                "f:name": {},
                                                "f:readOnly": {}
                                            }
                                        }
                                    }
                                },
                                "f:dnsPolicy": {},
                                "f:enableServiceLinks": {},
                                "f:hostNetwork": {},
                                "f:nodeName": {},
                                "f:priorityClassName": {},
                                "f:restartPolicy": {},
                                "f:schedulerName": {},
                                "f:securityContext": {},
                                "f:terminationGracePeriodSeconds": {},
                                "f:tolerations": {},
                                "f:volumes": {
                                    ".": {},
                                    "k:{\"name\":\"kubeconfig\"}": {
                                        ".": {},
                                        "f:hostPath": {
                                            ".": {},
                                            "f:path": {},
                                            "f:type": {}
                                        },
                                        "f:name": {}
                                    }
                                }
                            },
                            "f:status": {
                                "f:conditions": {
                                    ".": {},
                                    "k:{\"type\":\"ContainersReady\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Initialized\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"PodScheduled\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Ready\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    }
                                },
                                "f:containerStatuses": {},
                                "f:hostIP": {},
                                "f:phase": {},
                                "f:podIP": {},
                                "f:podIPs": {
                                    ".": {},
                                    "k:{\"ip\":\"172.17.0.3\"}": {
                                        ".": {},
                                        "f:ip": {}
                                    }
                                },
                                "f:startTime": {}
                            }
                        }
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "kubeconfig",
                        "hostPath": {
                            "path": "/etc/kubernetes/scheduler.conf",
                            "type": "FileOrCreate"
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "kube-scheduler",
                        "image": "k8s.gcr.io/kube-scheduler:v1.19.2",
                        "command": [
                            "kube-scheduler",
                            "--authentication-kubeconfig=/etc/kubernetes/scheduler.conf",
                            "--authorization-kubeconfig=/etc/kubernetes/scheduler.conf",
                            "--bind-address=127.0.0.1",
                            "--kubeconfig=/etc/kubernetes/scheduler.conf",
                            "--leader-elect=false",
                            "--port=0"
                        ],
                        "resources": {
                            "requests": {
                                "cpu": "100m"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "kubeconfig",
                                "readOnly": true,
                                "mountPath": "/etc/kubernetes/scheduler.conf"
                            }
                        ],
                        "livenessProbe": {
                            "httpGet": {
                                "path": "/healthz",
                                "port": 10259,
                                "host": "127.0.0.1",
                                "scheme": "HTTPS"
                            },
                            "initialDelaySeconds": 10,
                            "timeoutSeconds": 15,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 8
                        },
                        "startupProbe": {
                            "httpGet": {
                                "path": "/healthz",
                                "port": 10259,
                                "host": "127.0.0.1",
                                "scheme": "HTTPS"
                            },
                            "initialDelaySeconds": 10,
                            "timeoutSeconds": 15,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 24
                        },
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "ClusterFirst",
                "nodeName": "minikube",
                "hostNetwork": true,
                "securityContext": {},
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "operator": "Exists",
                        "effect": "NoExecute"
                    }
                ],
                "priorityClassName": "system-node-critical",
                "priority": 2000001000,
                "enableServiceLinks": true,
                "preemptionPolicy": "PreemptLowerPriority"
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-10-12T14:38:26Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-10-12T14:39:44Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-10-12T14:39:44Z"
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-10-12T14:38:26Z"
                    }
                ],
                "hostIP": "172.17.0.3",
                "podIP": "172.17.0.3",
                "podIPs": [
                    {
                        "ip": "172.17.0.3"
                    }
                ],
                "startTime": "2020-10-12T14:38:26Z",
                "containerStatuses": [
                    {
                        "name": "kube-scheduler",
                        "state": {
                            "running": {
                                "startedAt": "2020-10-12T14:38:07Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "k8s.gcr.io/kube-scheduler:v1.19.2",
                        "imageID": "docker-pullable://k8s.gcr.io/kube-scheduler@sha256:bb058c7394fad4d968d366b8b372698a1144a1c3c6de52cdf46ff050ccfd31ff",
                        "containerID": "docker://4928fa4d5d15b300e8a6e56094dd243312f0ac17a57b722b1aed63a186ae330e",
                        "started": true
                    }
                ],
                "qosClass": "Burstable"
            }
        },
        {
            "metadata": {
                "name": "storage-provisioner",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/pods/storage-provisioner",
                "uid": "c737087a-14a6-4034-b734-09b200c89eb5",
                "resourceVersion": "401",
                "creationTimestamp": "2020-10-12T14:38:23Z",
                "labels": {
                    "addonmanager.kubernetes.io/mode": "Reconcile",
                    "integration-test": "storage-provisioner"
                },
                "annotations": {
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Pod\",\"metadata\":{\"annotations\":{},\"labels\":{\"addonmanager.kubernetes.io/mode\":\"Reconcile\",\"integration-test\":\"storage-provisioner\"},\"name\":\"storage-provisioner\",\"namespace\":\"kube-system\"},\"spec\":{\"containers\":[{\"command\":[\"/storage-provisioner\"],\"image\":\"gcr.io/k8s-minikube/storage-provisioner:v3\",\"imagePullPolicy\":\"IfNotPresent\",\"name\":\"storage-provisioner\",\"volumeMounts\":[{\"mountPath\":\"/tmp\",\"name\":\"tmp\"}]}],\"hostNetwork\":true,\"serviceAccountName\":\"storage-provisioner\",\"volumes\":[{\"hostPath\":{\"path\":\"/tmp\",\"type\":\"Directory\"},\"name\":\"tmp\"}]}}\n"
                },
                "managedFields": [
                    {
                        "manager": "kube-scheduler",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-10-12T14:38:23Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:status": {
                                "f:conditions": {
                                    ".": {},
                                    "k:{\"type\":\"PodScheduled\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    }
                                }
                            }
                        }
                    },
                    {
                        "manager": "kubectl-client-side-apply",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-10-12T14:38:23Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    ".": {},
                                    "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                },
                                "f:labels": {
                                    ".": {},
                                    "f:addonmanager.kubernetes.io/mode": {},
                                    "f:integration-test": {}
                                }
                            },
                            "f:spec": {
                                "f:containers": {
                                    "k:{\"name\":\"storage-provisioner\"}": {
                                        ".": {},
                                        "f:command": {},
                                        "f:image": {},
                                        "f:imagePullPolicy": {},
                                        "f:name": {},
                                        "f:resources": {},
                                        "f:terminationMessagePath": {},
                                        "f:terminationMessagePolicy": {},
                                        "f:volumeMounts": {
                                            ".": {},
                                            "k:{\"mountPath\":\"/tmp\"}": {
                                                ".": {},
                                                "f:mountPath": {},
                                                "f:name": {}
                                            }
                                        }
                                    }
                                },
                                "f:dnsPolicy": {},
                                "f:enableServiceLinks": {},
                                "f:hostNetwork": {},
                                "f:restartPolicy": {},
                                "f:schedulerName": {},
                                "f:securityContext": {},
                                "f:serviceAccount": {},
                                "f:serviceAccountName": {},
                                "f:terminationGracePeriodSeconds": {},
                                "f:volumes": {
                                    ".": {},
                                    "k:{\"name\":\"tmp\"}": {
                                        ".": {},
                                        "f:hostPath": {
                                            ".": {},
                                            "f:path": {},
                                            "f:type": {}
                                        },
                                        "f:name": {}
                                    }
                                }
                            }
                        }
                    },
                    {
                        "manager": "kubelet",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-10-12T14:38:46Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:status": {
                                "f:conditions": {
                                    "k:{\"type\":\"ContainersReady\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Initialized\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Ready\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    }
                                },
                                "f:containerStatuses": {},
                                "f:hostIP": {},
                                "f:phase": {},
                                "f:podIP": {},
                                "f:podIPs": {
                                    ".": {},
                                    "k:{\"ip\":\"172.17.0.3\"}": {
                                        ".": {},
                                        "f:ip": {}
                                    }
                                },
                                "f:startTime": {}
                            }
                        }
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "tmp",
                        "hostPath": {
                            "path": "/tmp",
                            "type": "Directory"
                        }
                    },
                    {
                        "name": "storage-provisioner-token-c5jvf",
                        "secret": {
                            "secretName": "storage-provisioner-token-c5jvf",
                            "defaultMode": 420
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "storage-provisioner",
                        "image": "gcr.io/k8s-minikube/storage-provisioner:v3",
                        "command": [
                            "/storage-provisioner"
                        ],
                        "resources": {},
                        "volumeMounts": [
                            {
                                "name": "tmp",
                                "mountPath": "/tmp"
                            },
                            {
                                "name": "storage-provisioner-token-c5jvf",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "ClusterFirst",
                "serviceAccountName": "storage-provisioner",
                "serviceAccount": "storage-provisioner",
                "nodeName": "minikube",
                "hostNetwork": true,
                "securityContext": {},
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "key": "node.kubernetes.io/not-ready",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    },
                    {
                        "key": "node.kubernetes.io/unreachable",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    }
                ],
                "priority": 0,
                "enableServiceLinks": true,
                "preemptionPolicy": "PreemptLowerPriority"
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-10-12T14:38:45Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-10-12T14:38:46Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-10-12T14:38:46Z"
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-10-12T14:38:45Z"
                    }
                ],
                "hostIP": "172.17.0.3",
                "podIP": "172.17.0.3",
                "podIPs": [
                    {
                        "ip": "172.17.0.3"
                    }
                ],
                "startTime": "2020-10-12T14:38:45Z",
                "containerStatuses": [
                    {
                        "name": "storage-provisioner",
                        "state": {
                            "running": {
                                "startedAt": "2020-10-12T14:38:46Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "gcr.io/k8s-minikube/storage-provisioner:v3",
                        "imageID": "docker-pullable://gcr.io/k8s-minikube/storage-provisioner@sha256:5d8c9e69200846ff740bca872d681d2a736014386e4006fd26c4bf24ef7813ec",
                        "containerID": "docker://f21339e44ae3d3a5d9561e0d63cdf51e850f76d2509212abc0677ff2b45e65a9",
                        "started": true
                    }
                ],
                "qosClass": "BestEffort"
            }
        }
    ]
}
==== START logs for container coredns of pod kube-system/coredns-f9fd979d6-9rks2 ====
.:53
[INFO] plugin/reload: Running configuration MD5 = db32ca3650231d74073ff4cf814959a7
CoreDNS-1.7.0
linux/amd64, go1.14.4, f59c03d
==== END logs for container coredns of pod kube-system/coredns-f9fd979d6-9rks2 ====
==== START logs for container etcd of pod kube-system/etcd-minikube ====
[WARNING] Deprecated '--logger=capnslog' flag is set; use '--logger=zap' flag instead
2020-10-12 14:38:08.310930 I | etcdmain: etcd Version: 3.4.13
2020-10-12 14:38:08.311010 I | etcdmain: Git SHA: ae9734ed2
2020-10-12 14:38:08.311017 I | etcdmain: Go Version: go1.12.17
2020-10-12 14:38:08.311022 I | etcdmain: Go OS/Arch: linux/amd64
2020-10-12 14:38:08.311028 I | etcdmain: setting maximum number of CPUs to 4, total number of available CPUs is 4
[WARNING] Deprecated '--logger=capnslog' flag is set; use '--logger=zap' flag instead
2020-10-12 14:38:08.311236 I | embed: peerTLS: cert = /var/lib/minikube/certs/etcd/peer.crt, key = /var/lib/minikube/certs/etcd/peer.key, trusted-ca = /var/lib/minikube/certs/etcd/ca.crt, client-cert-auth = true, crl-file = 
2020-10-12 14:38:08.344265 I | embed: name = minikube
2020-10-12 14:38:08.344287 I | embed: data dir = /var/lib/minikube/etcd
2020-10-12 14:38:08.344294 I | embed: member dir = /var/lib/minikube/etcd/member
2020-10-12 14:38:08.344300 I | embed: heartbeat = 100ms
2020-10-12 14:38:08.344305 I | embed: election = 1000ms
2020-10-12 14:38:08.344310 I | embed: snapshot count = 10000
2020-10-12 14:38:08.344323 I | embed: advertise client URLs = https://172.17.0.3:2379
2020-10-12 14:38:09.021698 I | etcdserver: starting member b273bc7741bcb020 in cluster 86482fea2286a1d2
raft2020/10/12 14:38:09 INFO: b273bc7741bcb020 switched to configuration voters=()
raft2020/10/12 14:38:09 INFO: b273bc7741bcb020 became follower at term 0
raft2020/10/12 14:38:09 INFO: newRaft b273bc7741bcb020 [peers: [], term: 0, commit: 0, applied: 0, lastindex: 0, lastterm: 0]
raft2020/10/12 14:38:09 INFO: b273bc7741bcb020 became follower at term 1
raft2020/10/12 14:38:09 INFO: b273bc7741bcb020 switched to configuration voters=(12858828581462913056)
2020-10-12 14:38:09.043836 W | auth: simple token is not cryptographically signed
2020-10-12 14:38:09.078541 I | etcdserver: starting server... [version: 3.4.13, cluster version: to_be_decided]
2020-10-12 14:38:09.079866 I | etcdserver: b273bc7741bcb020 as single-node; fast-forwarding 9 ticks (election ticks 10)
raft2020/10/12 14:38:09 INFO: b273bc7741bcb020 switched to configuration voters=(12858828581462913056)
2020-10-12 14:38:09.094578 I | etcdserver/membership: added member b273bc7741bcb020 [https://172.17.0.3:2380] to cluster 86482fea2286a1d2
2020-10-12 14:38:09.105249 I | embed: ClientTLS: cert = /var/lib/minikube/certs/etcd/server.crt, key = /var/lib/minikube/certs/etcd/server.key, trusted-ca = /var/lib/minikube/certs/etcd/ca.crt, client-cert-auth = true, crl-file = 
2020-10-12 14:38:09.105501 I | embed: listening for peers on 172.17.0.3:2380
2020-10-12 14:38:09.106365 I | embed: listening for metrics on http://127.0.0.1:2381
raft2020/10/12 14:38:10 INFO: b273bc7741bcb020 is starting a new election at term 1
raft2020/10/12 14:38:10 INFO: b273bc7741bcb020 became candidate at term 2
raft2020/10/12 14:38:10 INFO: b273bc7741bcb020 received MsgVoteResp from b273bc7741bcb020 at term 2
raft2020/10/12 14:38:10 INFO: b273bc7741bcb020 became leader at term 2
raft2020/10/12 14:38:10 INFO: raft.node: b273bc7741bcb020 elected leader b273bc7741bcb020 at term 2
2020-10-12 14:38:10.032021 I | etcdserver: setting up the initial cluster version to 3.4
2020-10-12 14:38:10.032469 I | embed: ready to serve client requests
2020-10-12 14:38:10.032739 I | etcdserver: published {Name:minikube ClientURLs:[https://172.17.0.3:2379]} to cluster 86482fea2286a1d2
2020-10-12 14:38:10.032975 I | embed: ready to serve client requests
2020-10-12 14:38:10.055785 N | etcdserver/membership: set the initial cluster version to 3.4
2020-10-12 14:38:10.057410 I | etcdserver/api: enabled capabilities for version 3.4
2020-10-12 14:38:10.058299 I | embed: serving client requests on 172.17.0.3:2379
2020-10-12 14:38:10.059482 I | embed: serving client requests on 127.0.0.1:2379
2020-10-12 14:38:19.986753 W | etcdserver: read-only range request "key:\"/registry/serviceaccounts/kube-system/horizontal-pod-autoscaler\" " with result "range_response_count:0 size:5" took too long (123.560706ms) to execute
2020-10-12 14:38:22.304075 W | wal: sync duration of 1.407853113s, expected less than 1s
2020-10-12 14:38:22.308644 W | etcdserver: read-only range request "key:\"/registry/storageclasses/\" range_end:\"/registry/storageclasses0\" " with result "range_response_count:0 size:5" took too long (606.890091ms) to execute
2020-10-12 14:38:22.309953 W | etcdserver: read-only range request "key:\"/registry/health\" " with result "range_response_count:0 size:5" took too long (1.340038287s) to execute
2020-10-12 14:38:34.371010 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:38:39.397040 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:38:49.396377 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:38:59.396270 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:39:09.396222 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:39:19.396288 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:39:29.396141 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:39:39.396201 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:39:49.396262 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:39:59.396208 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:40:09.396254 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:40:19.396283 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:40:29.396227 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:40:39.396185 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:40:49.396314 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:40:59.396169 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:41:09.396270 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:41:19.396402 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:41:29.396461 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:41:39.396869 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:41:49.396137 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:41:59.396361 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:42:09.396186 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:42:19.396445 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:42:29.396228 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:42:39.396285 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:42:49.396212 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:42:59.396330 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:43:09.396226 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:43:19.396232 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:43:29.396141 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:43:39.396152 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:43:49.396344 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:43:59.396160 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:44:09.396169 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:44:19.396222 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:44:29.396443 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:44:39.396289 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:44:49.396195 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:44:59.396172 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:45:09.396210 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:45:19.396306 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:45:29.396300 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:45:39.396593 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:45:49.396198 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:45:59.396386 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:46:09.396147 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:46:19.396237 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:46:29.396169 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:46:39.396422 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:46:49.396326 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:46:59.396245 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:47:09.396175 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:47:19.396200 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:47:29.396397 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:47:39.396281 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:47:49.396367 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:47:59.396312 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:48:09.396169 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:48:10.309374 I | mvcc: store.index: compact 598
2020-10-12 14:48:10.320724 I | mvcc: finished scheduled compaction at 598 (took 10.591248ms)
2020-10-12 14:48:19.396322 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:48:29.396163 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:48:39.396260 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:48:49.396177 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:48:59.396346 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:49:09.396466 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:49:19.396244 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:49:29.396175 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:49:39.396215 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:49:49.396147 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:49:59.396336 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:50:09.396044 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:50:19.396195 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:50:29.396316 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:50:39.396304 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:50:49.396215 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:50:59.396175 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:51:09.396131 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:51:19.396352 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:51:29.396309 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2020-10-12 14:51:39.396269 I | etcdserver/api/etcdhttp: /health OK (status code 200)
==== END logs for container etcd of pod kube-system/etcd-minikube ====
==== START logs for container kube-apiserver of pod kube-system/kube-apiserver-minikube ====
Flag --insecure-port has been deprecated, This flag will be removed in a future version.
I1012 14:38:09.126205       1 server.go:625] external host was not specified, using 172.17.0.3
I1012 14:38:09.133052       1 server.go:163] Version: v1.19.2
I1012 14:38:10.260646       1 plugins.go:158] Loaded 12 mutating admission controller(s) successfully in the following order: NamespaceLifecycle,LimitRanger,ServiceAccount,NodeRestriction,TaintNodesByCondition,Priority,DefaultTolerationSeconds,DefaultStorageClass,StorageObjectInUseProtection,RuntimeClass,DefaultIngressClass,MutatingAdmissionWebhook.
I1012 14:38:10.260680       1 plugins.go:161] Loaded 10 validating admission controller(s) successfully in the following order: LimitRanger,ServiceAccount,Priority,PersistentVolumeClaimResize,RuntimeClass,CertificateApproval,CertificateSigning,CertificateSubjectRestriction,ValidatingAdmissionWebhook,ResourceQuota.
I1012 14:38:10.264097       1 plugins.go:158] Loaded 12 mutating admission controller(s) successfully in the following order: NamespaceLifecycle,LimitRanger,ServiceAccount,NodeRestriction,TaintNodesByCondition,Priority,DefaultTolerationSeconds,DefaultStorageClass,StorageObjectInUseProtection,RuntimeClass,DefaultIngressClass,MutatingAdmissionWebhook.
I1012 14:38:10.264119       1 plugins.go:161] Loaded 10 validating admission controller(s) successfully in the following order: LimitRanger,ServiceAccount,Priority,PersistentVolumeClaimResize,RuntimeClass,CertificateApproval,CertificateSigning,CertificateSubjectRestriction,ValidatingAdmissionWebhook,ResourceQuota.
I1012 14:38:10.274750       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:10.274903       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:10.293728       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:10.293764       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:10.312204       1 client.go:360] parsed scheme: "passthrough"
I1012 14:38:10.313062       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1012 14:38:10.313091       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1012 14:38:10.315170       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:10.315425       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:10.381726       1 master.go:271] Using reconciler: lease
I1012 14:38:10.382830       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:10.382874       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:10.396156       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:10.396189       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:10.413314       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:10.413489       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:10.422841       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:10.423097       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:10.441625       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:10.441922       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:10.458692       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:10.458955       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:10.469750       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:10.469995       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:10.479406       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:10.479460       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:10.490811       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:10.490856       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:10.501343       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:10.501393       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:10.512015       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:10.512060       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:10.524142       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:10.524437       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:10.536552       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:10.536600       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:10.551153       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:10.551197       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:10.561411       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:10.561472       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:10.571752       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:10.571791       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:10.580191       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:10.580240       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:10.588474       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:10.588516       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:10.750430       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:10.750477       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:10.761725       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:10.761837       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:10.771029       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:10.771319       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:10.784429       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:10.784486       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:10.806505       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:10.806551       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:10.815853       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:10.815890       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:10.824723       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:10.824781       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:10.835435       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:10.835480       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:10.845663       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:10.845939       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:10.858047       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:10.858094       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:10.866970       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:10.867005       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:10.877586       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:10.877638       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:10.889053       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:10.889176       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:10.900848       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:10.900943       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:10.910643       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:10.910783       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:10.922609       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:10.922811       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:10.942866       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:10.942915       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:10.951621       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:10.951675       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:10.963275       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:10.963309       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:10.972357       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:10.972594       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:10.981465       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:10.981543       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:10.992388       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:10.992441       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:11.001393       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:11.001435       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:11.012943       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:11.013014       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:11.025154       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:11.025281       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:11.035415       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:11.035463       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:11.045809       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:11.045854       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:11.073631       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:11.073690       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:11.084281       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:11.084416       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:11.094955       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:11.094989       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:11.105410       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:11.105485       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:11.116006       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:11.116060       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:11.126133       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:11.126181       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:11.137231       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:11.137288       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:11.147601       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:11.147758       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:11.171256       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:11.171304       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:11.184242       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:11.184461       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:11.197748       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:11.197800       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:11.206344       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:11.206414       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:11.216877       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:11.216952       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:11.227422       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:11.227474       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:11.236375       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:11.236642       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:11.245506       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:11.245545       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:11.247631       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:11.247680       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:11.256311       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:11.256519       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:11.266769       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:11.266813       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:11.275445       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:11.275674       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:11.285142       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:11.285189       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:11.295490       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:11.295688       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
W1012 14:38:11.539517       1 genericapiserver.go:412] Skipping API batch/v2alpha1 because it has no resources.
W1012 14:38:11.570845       1 genericapiserver.go:412] Skipping API discovery.k8s.io/v1alpha1 because it has no resources.
W1012 14:38:11.610565       1 genericapiserver.go:412] Skipping API node.k8s.io/v1alpha1 because it has no resources.
W1012 14:38:11.648934       1 genericapiserver.go:412] Skipping API rbac.authorization.k8s.io/v1alpha1 because it has no resources.
W1012 14:38:11.657506       1 genericapiserver.go:412] Skipping API scheduling.k8s.io/v1alpha1 because it has no resources.
W1012 14:38:11.717077       1 genericapiserver.go:412] Skipping API storage.k8s.io/v1alpha1 because it has no resources.
W1012 14:38:11.753041       1 genericapiserver.go:412] Skipping API apps/v1beta2 because it has no resources.
W1012 14:38:11.753084       1 genericapiserver.go:412] Skipping API apps/v1beta1 because it has no resources.
I1012 14:38:11.773281       1 plugins.go:158] Loaded 12 mutating admission controller(s) successfully in the following order: NamespaceLifecycle,LimitRanger,ServiceAccount,NodeRestriction,TaintNodesByCondition,Priority,DefaultTolerationSeconds,DefaultStorageClass,StorageObjectInUseProtection,RuntimeClass,DefaultIngressClass,MutatingAdmissionWebhook.
I1012 14:38:11.773312       1 plugins.go:161] Loaded 10 validating admission controller(s) successfully in the following order: LimitRanger,ServiceAccount,Priority,PersistentVolumeClaimResize,RuntimeClass,CertificateApproval,CertificateSigning,CertificateSubjectRestriction,ValidatingAdmissionWebhook,ResourceQuota.
I1012 14:38:11.780614       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:11.780669       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:11.791004       1 client.go:360] parsed scheme: "endpoint"
I1012 14:38:11.791044       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I1012 14:38:15.249371       1 dynamic_cafile_content.go:167] Starting client-ca-bundle::/var/lib/minikube/certs/ca.crt
I1012 14:38:15.249376       1 dynamic_cafile_content.go:167] Starting request-header::/var/lib/minikube/certs/front-proxy-ca.crt
I1012 14:38:15.250054       1 dynamic_serving_content.go:130] Starting serving-cert::/var/lib/minikube/certs/apiserver.crt::/var/lib/minikube/certs/apiserver.key
I1012 14:38:15.250998       1 secure_serving.go:197] Serving securely on [::]:8443
I1012 14:38:15.251050       1 available_controller.go:404] Starting AvailableConditionController
I1012 14:38:15.251058       1 cache.go:32] Waiting for caches to sync for AvailableConditionController controller
I1012 14:38:15.251189       1 tlsconfig.go:240] Starting DynamicServingCertificateController
I1012 14:38:15.251325       1 dynamic_serving_content.go:130] Starting aggregator-proxy-cert::/var/lib/minikube/certs/front-proxy-client.crt::/var/lib/minikube/certs/front-proxy-client.key
I1012 14:38:15.251395       1 apiservice_controller.go:97] Starting APIServiceRegistrationController
I1012 14:38:15.251407       1 cache.go:32] Waiting for caches to sync for APIServiceRegistrationController controller
I1012 14:38:15.254458       1 cluster_authentication_trust_controller.go:440] Starting cluster_authentication_trust_controller controller
I1012 14:38:15.254674       1 shared_informer.go:240] Waiting for caches to sync for cluster_authentication_trust_controller
I1012 14:38:15.255885       1 dynamic_cafile_content.go:167] Starting client-ca-bundle::/var/lib/minikube/certs/ca.crt
I1012 14:38:15.255972       1 customresource_discovery_controller.go:209] Starting DiscoveryController
I1012 14:38:15.263644       1 controller.go:83] Starting OpenAPI AggregationController
E1012 14:38:15.268763       1 controller.go:152] Unable to remove old endpoints from kubernetes service: StorageError: key not found, Code: 1, Key: /registry/masterleases/172.17.0.3, ResourceVersion: 0, AdditionalErrorMsg: 
I1012 14:38:15.271412       1 crdregistration_controller.go:111] Starting crd-autoregister controller
I1012 14:38:15.271436       1 shared_informer.go:240] Waiting for caches to sync for crd-autoregister
I1012 14:38:15.271485       1 controller.go:86] Starting OpenAPI controller
I1012 14:38:15.271509       1 naming_controller.go:291] Starting NamingConditionController
I1012 14:38:15.271534       1 establishing_controller.go:76] Starting EstablishingController
I1012 14:38:15.271555       1 nonstructuralschema_controller.go:186] Starting NonStructuralSchemaConditionController
I1012 14:38:15.271574       1 apiapproval_controller.go:186] Starting KubernetesAPIApprovalPolicyConformantConditionController
I1012 14:38:15.271605       1 crd_finalizer.go:266] Starting CRDFinalizer
I1012 14:38:15.255989       1 dynamic_cafile_content.go:167] Starting request-header::/var/lib/minikube/certs/front-proxy-ca.crt
I1012 14:38:15.254536       1 autoregister_controller.go:141] Starting autoregister controller
I1012 14:38:15.281177       1 cache.go:32] Waiting for caches to sync for autoregister controller
I1012 14:38:15.481639       1 cache.go:39] Caches are synced for autoregister controller
I1012 14:38:15.491881       1 cache.go:39] Caches are synced for APIServiceRegistrationController controller
I1012 14:38:15.493253       1 shared_informer.go:247] Caches are synced for cluster_authentication_trust_controller 
I1012 14:38:15.502992       1 cache.go:39] Caches are synced for AvailableConditionController controller
I1012 14:38:15.572112       1 shared_informer.go:247] Caches are synced for crd-autoregister 
I1012 14:38:16.245418       1 controller.go:132] OpenAPI AggregationController: action for item : Nothing (removed from the queue).
I1012 14:38:16.245442       1 controller.go:132] OpenAPI AggregationController: action for item k8s_internal_local_delegation_chain_0000000000: Nothing (removed from the queue).
I1012 14:38:16.282320       1 storage_scheduling.go:134] created PriorityClass system-node-critical with value 2000001000
I1012 14:38:16.305518       1 storage_scheduling.go:134] created PriorityClass system-cluster-critical with value 2000000000
I1012 14:38:16.305546       1 storage_scheduling.go:143] all system priority classes are created successfully or already exist.
I1012 14:38:16.924330       1 controller.go:606] quota admission added evaluator for: roles.rbac.authorization.k8s.io
I1012 14:38:16.989333       1 controller.go:606] quota admission added evaluator for: rolebindings.rbac.authorization.k8s.io
W1012 14:38:17.151755       1 lease.go:233] Resetting endpoints for master service "kubernetes" to [172.17.0.3]
I1012 14:38:17.153594       1 controller.go:606] quota admission added evaluator for: endpoints
I1012 14:38:17.162448       1 controller.go:606] quota admission added evaluator for: endpointslices.discovery.k8s.io
I1012 14:38:17.819089       1 controller.go:606] quota admission added evaluator for: serviceaccounts
I1012 14:38:19.182899       1 controller.go:606] quota admission added evaluator for: deployments.apps
I1012 14:38:19.251172       1 controller.go:606] quota admission added evaluator for: daemonsets.apps
I1012 14:38:22.311926       1 trace.go:205] Trace[254639524]: "List etcd3" key:/storageclasses,resourceVersion:,resourceVersionMatch:,limit:0,continue: (12-Oct-2020 14:38:21.701) (total time: 609ms):
Trace[254639524]: [609.987982ms] [609.987982ms] END
I1012 14:38:22.313394       1 trace.go:205] Trace[1226875624]: "List" url:/apis/storage.k8s.io/v1/storageclasses,user-agent:minikube/v0.0.0 (linux/amd64) kubernetes/$Format,client:172.17.0.1 (12-Oct-2020 14:38:21.701) (total time: 611ms):
Trace[1226875624]: ---"Listing from storage done" 610ms (14:38:00.311)
Trace[1226875624]: [611.074376ms] [611.074376ms] END
I1012 14:38:22.314550       1 trace.go:205] Trace[744957578]: "Create" url:/api/v1/namespaces/kube-system/serviceaccounts,user-agent:kube-controller-manager/v1.19.2 (linux/amd64) kubernetes/f574309/kube-controller-manager,client:172.17.0.3 (12-Oct-2020 14:38:20.906) (total time: 1408ms):
Trace[744957578]: ---"Object stored in database" 1408ms (14:38:00.314)
Trace[744957578]: [1.408178537s] [1.408178537s] END
I1012 14:38:24.898152       1 controller.go:606] quota admission added evaluator for: replicasets.apps
I1012 14:38:24.919693       1 controller.go:606] quota admission added evaluator for: controllerrevisions.apps
I1012 14:38:25.891336       1 controller.go:606] quota admission added evaluator for: leases.coordination.k8s.io
I1012 14:38:52.253759       1 client.go:360] parsed scheme: "passthrough"
I1012 14:38:52.256550       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1012 14:38:52.256975       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1012 14:39:32.281174       1 client.go:360] parsed scheme: "passthrough"
I1012 14:39:32.281228       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1012 14:39:32.281349       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1012 14:40:04.381261       1 client.go:360] parsed scheme: "passthrough"
I1012 14:40:04.381315       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1012 14:40:04.381330       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1012 14:40:46.777365       1 client.go:360] parsed scheme: "passthrough"
I1012 14:40:46.777421       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1012 14:40:46.777433       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1012 14:41:22.644897       1 client.go:360] parsed scheme: "passthrough"
I1012 14:41:22.644942       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1012 14:41:22.644955       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1012 14:41:52.920959       1 client.go:360] parsed scheme: "passthrough"
I1012 14:41:52.921000       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1012 14:41:52.921012       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1012 14:42:36.131059       1 client.go:360] parsed scheme: "passthrough"
I1012 14:42:36.131105       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1012 14:42:36.131116       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1012 14:43:20.793492       1 client.go:360] parsed scheme: "passthrough"
I1012 14:43:20.793547       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1012 14:43:20.793560       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1012 14:43:57.745819       1 client.go:360] parsed scheme: "passthrough"
I1012 14:43:57.745875       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1012 14:43:57.745891       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1012 14:44:28.084153       1 client.go:360] parsed scheme: "passthrough"
I1012 14:44:28.084205       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1012 14:44:28.084219       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1012 14:45:03.083765       1 client.go:360] parsed scheme: "passthrough"
I1012 14:45:03.083815       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1012 14:45:03.083827       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1012 14:45:40.255361       1 client.go:360] parsed scheme: "passthrough"
I1012 14:45:40.255421       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1012 14:45:40.255436       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1012 14:46:11.601825       1 client.go:360] parsed scheme: "passthrough"
I1012 14:46:11.601878       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1012 14:46:11.601895       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1012 14:46:56.193457       1 client.go:360] parsed scheme: "passthrough"
I1012 14:46:56.193511       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1012 14:46:56.193526       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1012 14:47:38.457093       1 client.go:360] parsed scheme: "passthrough"
I1012 14:47:38.457147       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1012 14:47:38.457161       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1012 14:48:12.769978       1 client.go:360] parsed scheme: "passthrough"
I1012 14:48:12.770034       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1012 14:48:12.770049       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1012 14:48:48.263707       1 client.go:360] parsed scheme: "passthrough"
I1012 14:48:48.263759       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1012 14:48:48.263774       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1012 14:49:28.428938       1 client.go:360] parsed scheme: "passthrough"
I1012 14:49:28.428985       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1012 14:49:28.428997       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1012 14:50:05.517940       1 client.go:360] parsed scheme: "passthrough"
I1012 14:50:05.517985       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1012 14:50:05.518000       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1012 14:50:46.105587       1 client.go:360] parsed scheme: "passthrough"
I1012 14:50:46.105628       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1012 14:50:46.105640       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I1012 14:51:22.324871       1 client.go:360] parsed scheme: "passthrough"
I1012 14:51:22.324956       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I1012 14:51:22.324976       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
==== END logs for container kube-apiserver of pod kube-system/kube-apiserver-minikube ====
==== START logs for container kube-controller-manager of pod kube-system/kube-controller-manager-minikube ====
Flag --port has been deprecated, see --secure-port instead.
I1012 14:38:09.720126       1 serving.go:331] Generated self-signed cert in-memory
I1012 14:38:10.170986       1 controllermanager.go:175] Version: v1.19.2
I1012 14:38:10.175739       1 dynamic_cafile_content.go:167] Starting request-header::/var/lib/minikube/certs/front-proxy-ca.crt
I1012 14:38:10.176081       1 dynamic_cafile_content.go:167] Starting client-ca-bundle::/var/lib/minikube/certs/ca.crt
I1012 14:38:10.176773       1 secure_serving.go:197] Serving securely on 127.0.0.1:10257
I1012 14:38:10.176967       1 tlsconfig.go:240] Starting DynamicServingCertificateController
W1012 14:38:17.803522       1 controllermanager.go:541] Skipping "ephemeral-volume"
I1012 14:38:17.804148       1 shared_informer.go:240] Waiting for caches to sync for tokens
I1012 14:38:17.904326       1 shared_informer.go:247] Caches are synced for tokens 
I1012 14:38:17.927271       1 controllermanager.go:549] Started "endpoint"
I1012 14:38:17.928079       1 endpoints_controller.go:184] Starting endpoint controller
I1012 14:38:17.928104       1 shared_informer.go:240] Waiting for caches to sync for endpoint
I1012 14:38:17.957677       1 controllermanager.go:549] Started "endpointslice"
I1012 14:38:17.961079       1 endpointslice_controller.go:237] Starting endpoint slice controller
I1012 14:38:17.961108       1 shared_informer.go:240] Waiting for caches to sync for endpoint_slice
I1012 14:38:18.340276       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for endpoints
I1012 14:38:18.340360       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for limitranges
I1012 14:38:18.340411       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for statefulsets.apps
I1012 14:38:18.340453       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for jobs.batch
I1012 14:38:18.340507       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for podtemplates
I1012 14:38:18.340875       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for ingresses.extensions
I1012 14:38:18.341612       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for roles.rbac.authorization.k8s.io
I1012 14:38:18.341659       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for leases.coordination.k8s.io
I1012 14:38:18.341693       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for controllerrevisions.apps
I1012 14:38:18.341786       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for replicasets.apps
I1012 14:38:18.341819       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for endpointslices.discovery.k8s.io
I1012 14:38:18.341886       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for serviceaccounts
I1012 14:38:18.341955       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for daemonsets.apps
I1012 14:38:18.341993       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for horizontalpodautoscalers.autoscaling
I1012 14:38:18.342035       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for poddisruptionbudgets.policy
I1012 14:38:18.342067       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for rolebindings.rbac.authorization.k8s.io
I1012 14:38:18.342121       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for deployments.apps
I1012 14:38:18.342156       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for events.events.k8s.io
I1012 14:38:18.342210       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for cronjobs.batch
I1012 14:38:18.342256       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for ingresses.networking.k8s.io
I1012 14:38:18.342301       1 resource_quota_monitor.go:228] QuotaMonitor created object count evaluator for networkpolicies.networking.k8s.io
I1012 14:38:18.342329       1 controllermanager.go:549] Started "resourcequota"
I1012 14:38:18.342418       1 resource_quota_controller.go:272] Starting resource quota controller
I1012 14:38:18.342433       1 shared_informer.go:240] Waiting for caches to sync for resource quota
I1012 14:38:18.343232       1 resource_quota_monitor.go:303] QuotaMonitor running
I1012 14:38:18.363646       1 controllermanager.go:549] Started "cronjob"
I1012 14:38:18.363875       1 cronjob_controller.go:96] Starting CronJob Manager
I1012 14:38:18.387926       1 controllermanager.go:549] Started "serviceaccount"
I1012 14:38:18.388204       1 serviceaccounts_controller.go:117] Starting service account controller
I1012 14:38:18.388220       1 shared_informer.go:240] Waiting for caches to sync for service account
I1012 14:38:18.509292       1 controllermanager.go:549] Started "bootstrapsigner"
W1012 14:38:18.509500       1 controllermanager.go:541] Skipping "nodeipam"
I1012 14:38:18.509441       1 shared_informer.go:240] Waiting for caches to sync for bootstrap_signer
I1012 14:38:18.509572       1 core.go:240] Will not configure cloud provider routes for allocate-node-cidrs: false, configure-cloud-routes: true.
W1012 14:38:18.512272       1 controllermanager.go:541] Skipping "route"
I1012 14:38:18.639707       1 controllermanager.go:549] Started "replicaset"
I1012 14:38:18.643361       1 replica_set.go:182] Starting replicaset controller
I1012 14:38:18.644579       1 shared_informer.go:240] Waiting for caches to sync for ReplicaSet
I1012 14:38:18.674399       1 controllermanager.go:549] Started "tokencleaner"
I1012 14:38:18.674735       1 tokencleaner.go:118] Starting token cleaner controller
I1012 14:38:18.674759       1 shared_informer.go:240] Waiting for caches to sync for token_cleaner
I1012 14:38:18.674778       1 shared_informer.go:247] Caches are synced for token_cleaner 
E1012 14:38:18.725290       1 core.go:90] Failed to start service controller: WARNING: no cloud provider provided, services of type LoadBalancer will fail
W1012 14:38:18.725748       1 controllermanager.go:541] Skipping "service"
I1012 14:38:18.807228       1 controllermanager.go:549] Started "clusterrole-aggregation"
W1012 14:38:18.807367       1 controllermanager.go:541] Skipping "ttl-after-finished"
I1012 14:38:18.807511       1 clusterroleaggregation_controller.go:149] Starting ClusterRoleAggregator
I1012 14:38:18.807524       1 shared_informer.go:240] Waiting for caches to sync for ClusterRoleAggregator
I1012 14:38:19.069857       1 controllermanager.go:549] Started "namespace"
I1012 14:38:19.070090       1 namespace_controller.go:200] Starting namespace controller
I1012 14:38:19.070108       1 shared_informer.go:240] Waiting for caches to sync for namespace
I1012 14:38:19.309831       1 controllermanager.go:549] Started "daemonset"
I1012 14:38:19.309910       1 daemon_controller.go:285] Starting daemon sets controller
I1012 14:38:19.309919       1 shared_informer.go:240] Waiting for caches to sync for daemon sets
I1012 14:38:19.490030       1 request.go:645] Throttling request took 1.045856352s, request: GET:https://172.17.0.3:8443/apis/networking.k8s.io/v1beta1?timeout=32s
I1012 14:38:19.558959       1 controllermanager.go:549] Started "csrcleaner"
I1012 14:38:19.559036       1 cleaner.go:83] Starting CSR cleaner controller
I1012 14:38:19.812095       1 controllermanager.go:549] Started "pv-protection"
I1012 14:38:19.812199       1 pv_protection_controller.go:83] Starting PV protection controller
I1012 14:38:19.812223       1 shared_informer.go:240] Waiting for caches to sync for PV protection
I1012 14:38:20.515053       1 controllermanager.go:549] Started "horizontalpodautoscaling"
I1012 14:38:20.515334       1 horizontal.go:169] Starting HPA controller
I1012 14:38:20.515350       1 shared_informer.go:240] Waiting for caches to sync for HPA
I1012 14:38:20.773089       1 controllermanager.go:549] Started "ttl"
I1012 14:38:20.787079       1 ttl_controller.go:118] Starting TTL controller
I1012 14:38:20.787161       1 shared_informer.go:240] Waiting for caches to sync for TTL
I1012 14:38:22.347786       1 node_lifecycle_controller.go:77] Sending events to api server
E1012 14:38:22.347860       1 core.go:230] failed to start cloud node lifecycle controller: no cloud provider provided
W1012 14:38:22.347877       1 controllermanager.go:541] Skipping "cloud-node-lifecycle"
I1012 14:38:22.363652       1 controllermanager.go:549] Started "csrapproving"
I1012 14:38:22.363802       1 certificate_controller.go:118] Starting certificate controller "csrapproving"
I1012 14:38:22.363821       1 shared_informer.go:240] Waiting for caches to sync for certificate-csrapproving
I1012 14:38:22.378036       1 node_lifecycle_controller.go:380] Sending events to api server.
I1012 14:38:22.381082       1 taint_manager.go:163] Sending events to api server.
I1012 14:38:22.382367       1 node_lifecycle_controller.go:508] Controller will reconcile labels.
I1012 14:38:22.382435       1 controllermanager.go:549] Started "nodelifecycle"
I1012 14:38:22.382716       1 node_lifecycle_controller.go:542] Starting node controller
I1012 14:38:22.383046       1 shared_informer.go:240] Waiting for caches to sync for taint
I1012 14:38:22.440191       1 controllermanager.go:549] Started "endpointslicemirroring"
I1012 14:38:22.443176       1 endpointslicemirroring_controller.go:211] Starting EndpointSliceMirroring controller
I1012 14:38:22.443223       1 shared_informer.go:240] Waiting for caches to sync for endpoint_slice_mirroring
I1012 14:38:22.494153       1 controllermanager.go:549] Started "replicationcontroller"
I1012 14:38:22.494288       1 replica_set.go:182] Starting replicationcontroller controller
I1012 14:38:22.494304       1 shared_informer.go:240] Waiting for caches to sync for ReplicationController
I1012 14:38:22.550765       1 controllermanager.go:549] Started "job"
I1012 14:38:22.551032       1 job_controller.go:148] Starting job controller
I1012 14:38:22.551050       1 shared_informer.go:240] Waiting for caches to sync for job
I1012 14:38:22.608583       1 controllermanager.go:549] Started "disruption"
I1012 14:38:22.608723       1 disruption.go:331] Starting disruption controller
I1012 14:38:22.608736       1 shared_informer.go:240] Waiting for caches to sync for disruption
I1012 14:38:22.730309       1 controllermanager.go:549] Started "persistentvolume-expander"
W1012 14:38:22.730354       1 controllermanager.go:541] Skipping "root-ca-cert-publisher"
I1012 14:38:22.730430       1 expand_controller.go:319] Starting expand controller
I1012 14:38:22.730439       1 shared_informer.go:240] Waiting for caches to sync for expand
I1012 14:38:22.958803       1 controllermanager.go:549] Started "podgc"
I1012 14:38:22.958886       1 gc_controller.go:89] Starting GC controller
I1012 14:38:22.958902       1 shared_informer.go:240] Waiting for caches to sync for GC
I1012 14:38:23.128456       1 certificate_controller.go:118] Starting certificate controller "csrsigning-kubelet-serving"
I1012 14:38:23.128530       1 shared_informer.go:240] Waiting for caches to sync for certificate-csrsigning-kubelet-serving
I1012 14:38:23.128456       1 certificate_controller.go:118] Starting certificate controller "csrsigning-kubelet-client"
I1012 14:38:23.128565       1 shared_informer.go:240] Waiting for caches to sync for certificate-csrsigning-kubelet-client
I1012 14:38:23.129034       1 dynamic_serving_content.go:130] Starting csr-controller::/var/lib/minikube/certs/ca.crt::/var/lib/minikube/certs/ca.key
I1012 14:38:23.129151       1 dynamic_serving_content.go:130] Starting csr-controller::/var/lib/minikube/certs/ca.crt::/var/lib/minikube/certs/ca.key
I1012 14:38:23.129411       1 certificate_controller.go:118] Starting certificate controller "csrsigning-kube-apiserver-client"
I1012 14:38:23.129429       1 shared_informer.go:240] Waiting for caches to sync for certificate-csrsigning-kube-apiserver-client
I1012 14:38:23.129461       1 dynamic_serving_content.go:130] Starting csr-controller::/var/lib/minikube/certs/ca.crt::/var/lib/minikube/certs/ca.key
I1012 14:38:23.130004       1 controllermanager.go:549] Started "csrsigning"
I1012 14:38:23.135508       1 certificate_controller.go:118] Starting certificate controller "csrsigning-legacy-unknown"
I1012 14:38:23.135540       1 shared_informer.go:240] Waiting for caches to sync for certificate-csrsigning-legacy-unknown
I1012 14:38:23.135606       1 dynamic_serving_content.go:130] Starting csr-controller::/var/lib/minikube/certs/ca.crt::/var/lib/minikube/certs/ca.key
I1012 14:38:23.361645       1 controllermanager.go:549] Started "persistentvolume-binder"
I1012 14:38:23.361753       1 pv_controller_base.go:303] Starting persistent volume controller
I1012 14:38:23.361763       1 shared_informer.go:240] Waiting for caches to sync for persistent volume
I1012 14:38:23.613062       1 controllermanager.go:549] Started "attachdetach"
I1012 14:38:23.613132       1 attach_detach_controller.go:322] Starting attach detach controller
I1012 14:38:23.613628       1 shared_informer.go:240] Waiting for caches to sync for attach detach
I1012 14:38:24.011300       1 garbagecollector.go:128] Starting garbage collector controller
I1012 14:38:24.011334       1 shared_informer.go:240] Waiting for caches to sync for garbage collector
I1012 14:38:24.011509       1 graph_builder.go:282] GraphBuilder running
I1012 14:38:24.014515       1 controllermanager.go:549] Started "garbagecollector"
I1012 14:38:24.258017       1 controllermanager.go:549] Started "deployment"
I1012 14:38:24.258103       1 deployment_controller.go:153] Starting deployment controller
I1012 14:38:24.258114       1 shared_informer.go:240] Waiting for caches to sync for deployment
I1012 14:38:24.507728       1 controllermanager.go:549] Started "statefulset"
I1012 14:38:24.507794       1 stateful_set.go:146] Starting stateful set controller
I1012 14:38:24.507802       1 shared_informer.go:240] Waiting for caches to sync for stateful set
I1012 14:38:24.758058       1 controllermanager.go:549] Started "pvc-protection"
I1012 14:38:24.758818       1 shared_informer.go:240] Waiting for caches to sync for resource quota
I1012 14:38:24.759950       1 pvc_protection_controller.go:110] Starting PVC protection controller
I1012 14:38:24.760126       1 shared_informer.go:240] Waiting for caches to sync for PVC protection
I1012 14:38:24.810487       1 shared_informer.go:247] Caches are synced for ClusterRoleAggregator 
I1012 14:38:24.811556       1 shared_informer.go:247] Caches are synced for service account 
I1012 14:38:24.817489       1 shared_informer.go:247] Caches are synced for PV protection 
W1012 14:38:24.825666       1 actual_state_of_world.go:506] Failed to update statusUpdateNeeded field in actual state of world: Failed to set statusUpdateNeeded to needed true, because nodeName="minikube" does not exist
I1012 14:38:24.830936       1 shared_informer.go:247] Caches are synced for expand 
I1012 14:38:24.831222       1 shared_informer.go:247] Caches are synced for endpoint 
I1012 14:38:24.831389       1 shared_informer.go:247] Caches are synced for certificate-csrsigning-kubelet-client 
I1012 14:38:24.831590       1 shared_informer.go:247] Caches are synced for certificate-csrsigning-kubelet-serving 
I1012 14:38:24.831759       1 shared_informer.go:247] Caches are synced for certificate-csrsigning-kube-apiserver-client 
I1012 14:38:24.836597       1 shared_informer.go:247] Caches are synced for certificate-csrsigning-legacy-unknown 
I1012 14:38:24.843555       1 shared_informer.go:247] Caches are synced for endpoint_slice_mirroring 
I1012 14:38:24.844927       1 shared_informer.go:247] Caches are synced for ReplicaSet 
I1012 14:38:24.851237       1 shared_informer.go:247] Caches are synced for job 
I1012 14:38:24.858281       1 shared_informer.go:247] Caches are synced for deployment 
I1012 14:38:24.859042       1 shared_informer.go:247] Caches are synced for GC 
I1012 14:38:24.860534       1 shared_informer.go:247] Caches are synced for PVC protection 
I1012 14:38:24.861484       1 shared_informer.go:247] Caches are synced for endpoint_slice 
I1012 14:38:24.863257       1 shared_informer.go:247] Caches are synced for persistent volume 
I1012 14:38:24.863865       1 shared_informer.go:247] Caches are synced for certificate-csrapproving 
I1012 14:38:24.882599       1 shared_informer.go:247] Caches are synced for namespace 
I1012 14:38:24.888122       1 shared_informer.go:247] Caches are synced for TTL 
I1012 14:38:24.895168       1 shared_informer.go:247] Caches are synced for ReplicationController 
I1012 14:38:24.908269       1 shared_informer.go:247] Caches are synced for stateful set 
I1012 14:38:24.909339       1 shared_informer.go:247] Caches are synced for disruption 
I1012 14:38:24.909489       1 disruption.go:339] Sending events to api server.
I1012 14:38:24.910459       1 shared_informer.go:247] Caches are synced for daemon sets 
I1012 14:38:24.910475       1 shared_informer.go:247] Caches are synced for bootstrap_signer 
I1012 14:38:24.914355       1 shared_informer.go:247] Caches are synced for attach detach 
I1012 14:38:24.915458       1 shared_informer.go:247] Caches are synced for HPA 
E1012 14:38:24.925471       1 clusterroleaggregation_controller.go:181] edit failed with : Operation cannot be fulfilled on clusterroles.rbac.authorization.k8s.io "edit": the object has been modified; please apply your changes to the latest version and try again
I1012 14:38:24.936261       1 event.go:291] "Event occurred" object="kube-system/coredns" kind="Deployment" apiVersion="apps/v1" type="Normal" reason="ScalingReplicaSet" message="Scaled up replica set coredns-f9fd979d6 to 1"
I1012 14:38:24.979246       1 event.go:291] "Event occurred" object="kube-system/coredns-f9fd979d6" kind="ReplicaSet" apiVersion="apps/v1" type="Normal" reason="SuccessfulCreate" message="Created pod: coredns-f9fd979d6-9rks2"
I1012 14:38:24.992490       1 event.go:291] "Event occurred" object="kube-system/kube-proxy" kind="DaemonSet" apiVersion="apps/v1" type="Normal" reason="SuccessfulCreate" message="Created pod: kube-proxy-qwt4m"
I1012 14:38:25.045150       1 shared_informer.go:247] Caches are synced for resource quota 
I1012 14:38:25.059149       1 shared_informer.go:247] Caches are synced for resource quota 
I1012 14:38:25.083207       1 shared_informer.go:247] Caches are synced for taint 
I1012 14:38:25.083256       1 taint_manager.go:187] Starting NoExecuteTaintManager
I1012 14:38:25.083290       1 node_lifecycle_controller.go:1429] Initializing eviction metric for zone: 
W1012 14:38:25.083805       1 node_lifecycle_controller.go:1044] Missing timestamp for Node minikube. Assuming now as a timestamp.
I1012 14:38:25.083878       1 node_lifecycle_controller.go:1195] Controller detected that all Nodes are not-Ready. Entering master disruption mode.
I1012 14:38:25.084117       1 event.go:291] "Event occurred" object="minikube" kind="Node" apiVersion="v1" type="Normal" reason="RegisteredNode" message="Node minikube event: Registered Node minikube in Controller"
I1012 14:38:25.125189       1 shared_informer.go:240] Waiting for caches to sync for garbage collector
I1012 14:38:25.367258       1 shared_informer.go:247] Caches are synced for garbage collector 
I1012 14:38:25.367421       1 garbagecollector.go:137] Garbage collector: all resource monitors have synced. Proceeding to collect garbage
I1012 14:38:25.425369       1 shared_informer.go:247] Caches are synced for garbage collector 
I1012 14:38:40.084519       1 node_lifecycle_controller.go:1222] Controller detected that some Nodes are Ready. Exiting master disruption mode.
==== END logs for container kube-controller-manager of pod kube-system/kube-controller-manager-minikube ====
==== START logs for container kube-proxy of pod kube-system/kube-proxy-qwt4m ====
I1012 14:38:28.237574       1 node.go:136] Successfully retrieved node IP: 172.17.0.3
I1012 14:38:28.237719       1 server_others.go:111] kube-proxy node IP is an IPv4 address (172.17.0.3), assume IPv4 operation
W1012 14:38:28.359562       1 server_others.go:579] Unknown proxy mode "", assuming iptables proxy
I1012 14:38:28.359796       1 server_others.go:186] Using iptables Proxier.
W1012 14:38:28.359814       1 server_others.go:456] detect-local-mode set to ClusterCIDR, but no cluster CIDR defined
I1012 14:38:28.359821       1 server_others.go:467] detect-local-mode: ClusterCIDR , defaulting to no-op detect-local
I1012 14:38:28.363156       1 server.go:650] Version: v1.19.2
I1012 14:38:28.366500       1 conntrack.go:100] Set sysctl 'net/netfilter/nf_conntrack_max' to 131072
I1012 14:38:28.366723       1 conntrack.go:52] Setting nf_conntrack_max to 131072
E1012 14:38:28.367348       1 conntrack.go:127] sysfs is not writable: {Device:sysfs Path:/sys Type:sysfs Opts:[ro nosuid nodev noexec relatime] Freq:0 Pass:0} (mount options are [ro nosuid nodev noexec relatime])
I1012 14:38:28.370464       1 conntrack.go:100] Set sysctl 'net/netfilter/nf_conntrack_tcp_timeout_established' to 86400
I1012 14:38:28.370554       1 conntrack.go:100] Set sysctl 'net/netfilter/nf_conntrack_tcp_timeout_close_wait' to 3600
I1012 14:38:28.374246       1 config.go:315] Starting service config controller
I1012 14:38:28.374272       1 config.go:224] Starting endpoint slice config controller
I1012 14:38:28.375338       1 shared_informer.go:240] Waiting for caches to sync for endpoint slice config
I1012 14:38:28.376631       1 shared_informer.go:240] Waiting for caches to sync for service config
I1012 14:38:28.475653       1 shared_informer.go:247] Caches are synced for endpoint slice config 
I1012 14:38:28.476788       1 shared_informer.go:247] Caches are synced for service config 
==== END logs for container kube-proxy of pod kube-system/kube-proxy-qwt4m ====
==== START logs for container kube-scheduler of pod kube-system/kube-scheduler-minikube ====
I1012 14:38:08.275083       1 registry.go:173] Registering SelectorSpread plugin
I1012 14:38:08.275865       1 registry.go:173] Registering SelectorSpread plugin
I1012 14:38:08.757078       1 serving.go:331] Generated self-signed cert in-memory
W1012 14:38:15.461582       1 requestheader_controller.go:193] Unable to get configmap/extension-apiserver-authentication in kube-system.  Usually fixed by 'kubectl create rolebinding -n kube-system ROLEBINDING_NAME --role=extension-apiserver-authentication-reader --serviceaccount=YOUR_NS:YOUR_SA'
W1012 14:38:15.463278       1 authentication.go:294] Error looking up in-cluster authentication configuration: configmaps "extension-apiserver-authentication" is forbidden: User "system:kube-scheduler" cannot get resource "configmaps" in API group "" in the namespace "kube-system"
W1012 14:38:15.464021       1 authentication.go:295] Continuing without authentication configuration. This may treat all requests as anonymous.
W1012 14:38:15.464181       1 authentication.go:296] To require authentication configuration lookup to succeed, set --authentication-tolerate-lookup-failure=false
I1012 14:38:15.507335       1 registry.go:173] Registering SelectorSpread plugin
I1012 14:38:15.507611       1 registry.go:173] Registering SelectorSpread plugin
I1012 14:38:15.599105       1 secure_serving.go:197] Serving securely on 127.0.0.1:10259
I1012 14:38:15.599237       1 configmap_cafile_content.go:202] Starting client-ca::kube-system::extension-apiserver-authentication::client-ca-file
I1012 14:38:15.599247       1 shared_informer.go:240] Waiting for caches to sync for client-ca::kube-system::extension-apiserver-authentication::client-ca-file
I1012 14:38:15.599276       1 tlsconfig.go:240] Starting DynamicServingCertificateController
E1012 14:38:15.607427       1 reflector.go:127] k8s.io/apiserver/pkg/server/dynamiccertificates/configmap_cafile_content.go:206: Failed to watch *v1.ConfigMap: failed to list *v1.ConfigMap: configmaps "extension-apiserver-authentication" is forbidden: User "system:kube-scheduler" cannot list resource "configmaps" in API group "" in the namespace "kube-system"
E1012 14:38:15.609404       1 reflector.go:127] k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.StatefulSet: failed to list *v1.StatefulSet: statefulsets.apps is forbidden: User "system:kube-scheduler" cannot list resource "statefulsets" in API group "apps" at the cluster scope
E1012 14:38:15.609814       1 reflector.go:127] k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.Service: failed to list *v1.Service: services is forbidden: User "system:kube-scheduler" cannot list resource "services" in API group "" at the cluster scope
E1012 14:38:15.610198       1 reflector.go:127] k8s.io/kubernetes/cmd/kube-scheduler/app/server.go:188: Failed to watch *v1.Pod: failed to list *v1.Pod: pods is forbidden: User "system:kube-scheduler" cannot list resource "pods" in API group "" at the cluster scope
E1012 14:38:15.611604       1 reflector.go:127] k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.StorageClass: failed to list *v1.StorageClass: storageclasses.storage.k8s.io is forbidden: User "system:kube-scheduler" cannot list resource "storageclasses" in API group "storage.k8s.io" at the cluster scope
E1012 14:38:15.613532       1 reflector.go:127] k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.ReplicaSet: failed to list *v1.ReplicaSet: replicasets.apps is forbidden: User "system:kube-scheduler" cannot list resource "replicasets" in API group "apps" at the cluster scope
E1012 14:38:15.621066       1 reflector.go:127] k8s.io/client-go/informers/factory.go:134: Failed to watch *v1beta1.PodDisruptionBudget: failed to list *v1beta1.PodDisruptionBudget: poddisruptionbudgets.policy is forbidden: User "system:kube-scheduler" cannot list resource "poddisruptionbudgets" in API group "policy" at the cluster scope
E1012 14:38:15.621349       1 reflector.go:127] k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.PersistentVolumeClaim: failed to list *v1.PersistentVolumeClaim: persistentvolumeclaims is forbidden: User "system:kube-scheduler" cannot list resource "persistentvolumeclaims" in API group "" at the cluster scope
E1012 14:38:15.621536       1 reflector.go:127] k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.Node: failed to list *v1.Node: nodes is forbidden: User "system:kube-scheduler" cannot list resource "nodes" in API group "" at the cluster scope
E1012 14:38:15.621713       1 reflector.go:127] k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.CSINode: failed to list *v1.CSINode: csinodes.storage.k8s.io is forbidden: User "system:kube-scheduler" cannot list resource "csinodes" in API group "storage.k8s.io" at the cluster scope
E1012 14:38:15.621883       1 reflector.go:127] k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.ReplicationController: failed to list *v1.ReplicationController: replicationcontrollers is forbidden: User "system:kube-scheduler" cannot list resource "replicationcontrollers" in API group "" at the cluster scope
E1012 14:38:15.622059       1 reflector.go:127] k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.Pod: failed to list *v1.Pod: pods is forbidden: User "system:kube-scheduler" cannot list resource "pods" in API group "" at the cluster scope
E1012 14:38:15.622241       1 reflector.go:127] k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.PersistentVolume: failed to list *v1.PersistentVolume: persistentvolumes is forbidden: User "system:kube-scheduler" cannot list resource "persistentvolumes" in API group "" at the cluster scope
E1012 14:38:16.480033       1 reflector.go:127] k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.PersistentVolume: failed to list *v1.PersistentVolume: persistentvolumes is forbidden: User "system:kube-scheduler" cannot list resource "persistentvolumes" in API group "" at the cluster scope
E1012 14:38:16.520396       1 reflector.go:127] k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.StorageClass: failed to list *v1.StorageClass: storageclasses.storage.k8s.io is forbidden: User "system:kube-scheduler" cannot list resource "storageclasses" in API group "storage.k8s.io" at the cluster scope
E1012 14:38:16.538786       1 reflector.go:127] k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.StatefulSet: failed to list *v1.StatefulSet: statefulsets.apps is forbidden: User "system:kube-scheduler" cannot list resource "statefulsets" in API group "apps" at the cluster scope
E1012 14:38:16.578117       1 reflector.go:127] k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.PersistentVolumeClaim: failed to list *v1.PersistentVolumeClaim: persistentvolumeclaims is forbidden: User "system:kube-scheduler" cannot list resource "persistentvolumeclaims" in API group "" at the cluster scope
E1012 14:38:16.653740       1 reflector.go:127] k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.Pod: failed to list *v1.Pod: pods is forbidden: User "system:kube-scheduler" cannot list resource "pods" in API group "" at the cluster scope
I1012 14:38:17.199388       1 shared_informer.go:247] Caches are synced for client-ca::kube-system::extension-apiserver-authentication::client-ca-file 
==== END logs for container kube-scheduler of pod kube-system/kube-scheduler-minikube ====
==== START logs for container storage-provisioner of pod kube-system/storage-provisioner ====
I1012 14:38:46.579953       1 leaderelection.go:242] attempting to acquire leader lease  kube-system/k8s.io-minikube-hostpath...
I1012 14:38:46.599249       1 leaderelection.go:252] successfully acquired lease kube-system/k8s.io-minikube-hostpath
I1012 14:38:46.600796       1 event.go:281] Event(v1.ObjectReference{Kind:"Endpoints", Namespace:"kube-system", Name:"k8s.io-minikube-hostpath", UID:"46df206f-131a-44f5-90a0-45e802af633b", APIVersion:"v1", ResourceVersion:"398", FieldPath:""}): type: 'Normal' reason: 'LeaderElection' minikube_0d23bb6c-370b-4f05-af7f-2889f5677823 became leader
I1012 14:38:46.600897       1 controller.go:799] Starting provisioner controller k8s.io/minikube-hostpath_minikube_0d23bb6c-370b-4f05-af7f-2889f5677823!
I1012 14:38:46.701175       1 controller.go:848] Started provisioner controller k8s.io/minikube-hostpath_minikube_0d23bb6c-370b-4f05-af7f-2889f5677823!
==== END logs for container storage-provisioner of pod kube-system/storage-provisioner ====
{
    "kind": "EventList",
    "apiVersion": "v1",
    "metadata": {
        "selfLink": "/api/v1/namespaces/default/events",
        "resourceVersion": "958"
    },
    "items": [
        {
            "metadata": {
                "name": "minikube.163d45860c361d2b",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/minikube.163d45860c361d2b",
                "uid": "356cb8d2-f275-4b19-adc5-83ef454d0feb",
                "resourceVersion": "181",
                "creationTimestamp": "2020-10-12T14:38:17Z",
                "managedFields": [
                    {
                        "manager": "kubelet",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-10-12T14:38:18Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:count": {},
                            "f:firstTimestamp": {},
                            "f:involvedObject": {
                                "f:kind": {},
                                "f:name": {},
                                "f:uid": {}
                            },
                            "f:lastTimestamp": {},
                            "f:message": {},
                            "f:reason": {},
                            "f:source": {
                                "f:component": {},
                                "f:host": {}
                            },
                            "f:type": {}
                        }
                    }
                ]
            },
            "involvedObject": {
                "kind": "Node",
                "name": "minikube",
                "uid": "minikube"
            },
            "reason": "NodeHasSufficientMemory",
            "message": "Node minikube status is now: NodeHasSufficientMemory",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-10-12T14:38:04Z",
            "lastTimestamp": "2020-10-12T14:38:04Z",
            "count": 5,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "minikube.163d45860c365994",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/minikube.163d45860c365994",
                "uid": "8a21c1ac-15aa-4197-87e3-2c78ab640b11",
                "resourceVersion": "188",
                "creationTimestamp": "2020-10-12T14:38:17Z",
                "managedFields": [
                    {
                        "manager": "kubelet",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-10-12T14:38:18Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:count": {},
                            "f:firstTimestamp": {},
                            "f:involvedObject": {
                                "f:kind": {},
                                "f:name": {},
                                "f:uid": {}
                            },
                            "f:lastTimestamp": {},
                            "f:message": {},
                            "f:reason": {},
                            "f:source": {
                                "f:component": {},
                                "f:host": {}
                            },
                            "f:type": {}
                        }
                    }
                ]
            },
            "involvedObject": {
                "kind": "Node",
                "name": "minikube",
                "uid": "minikube"
            },
            "reason": "NodeHasNoDiskPressure",
            "message": "Node minikube status is now: NodeHasNoDiskPressure",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-10-12T14:38:04Z",
            "lastTimestamp": "2020-10-12T14:38:04Z",
            "count": 5,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "minikube.163d45860c36716e",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/minikube.163d45860c36716e",
                "uid": "b51b22bd-d268-420f-baae-99b2a43daad5",
                "resourceVersion": "215",
                "creationTimestamp": "2020-10-12T14:38:17Z",
                "managedFields": [
                    {
                        "manager": "kubelet",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-10-12T14:38:18Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:count": {},
                            "f:firstTimestamp": {},
                            "f:involvedObject": {
                                "f:kind": {},
                                "f:name": {},
                                "f:uid": {}
                            },
                            "f:lastTimestamp": {},
                            "f:message": {},
                            "f:reason": {},
                            "f:source": {
                                "f:component": {},
                                "f:host": {}
                            },
                            "f:type": {}
                        }
                    }
                ]
            },
            "involvedObject": {
                "kind": "Node",
                "name": "minikube",
                "uid": "minikube"
            },
            "reason": "NodeHasSufficientPID",
            "message": "Node minikube status is now: NodeHasSufficientPID",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-10-12T14:38:04Z",
            "lastTimestamp": "2020-10-12T14:38:04Z",
            "count": 6,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "minikube.163d458ada4125f6",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/minikube.163d458ada4125f6",
                "uid": "9a8b6b74-cd54-4d58-be39-8c0549b4663e",
                "resourceVersion": "350",
                "creationTimestamp": "2020-10-12T14:38:25Z",
                "managedFields": [
                    {
                        "manager": "kube-controller-manager",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-10-12T14:38:25Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:count": {},
                            "f:firstTimestamp": {},
                            "f:involvedObject": {
                                "f:apiVersion": {},
                                "f:kind": {},
                                "f:name": {},
                                "f:uid": {}
                            },
                            "f:lastTimestamp": {},
                            "f:message": {},
                            "f:reason": {},
                            "f:source": {
                                "f:component": {}
                            },
                            "f:type": {}
                        }
                    }
                ]
            },
            "involvedObject": {
                "kind": "Node",
                "name": "minikube",
                "uid": "82eb58ef-87ae-4277-a47b-df643d8aee56",
                "apiVersion": "v1"
            },
            "reason": "RegisteredNode",
            "message": "Node minikube event: Registered Node minikube in Controller",
            "source": {
                "component": "node-controller"
            },
            "firstTimestamp": "2020-10-12T14:38:25Z",
            "lastTimestamp": "2020-10-12T14:38:25Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "minikube.163d458b07bbb48d",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/minikube.163d458b07bbb48d",
                "uid": "ed728f3e-dd34-4685-af94-9552eaa5b45c",
                "resourceVersion": "352",
                "creationTimestamp": "2020-10-12T14:38:25Z",
                "managedFields": [
                    {
                        "manager": "kubelet",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-10-12T14:38:25Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:count": {},
                            "f:firstTimestamp": {},
                            "f:involvedObject": {
                                "f:kind": {},
                                "f:name": {},
                                "f:uid": {}
                            },
                            "f:lastTimestamp": {},
                            "f:message": {},
                            "f:reason": {},
                            "f:source": {
                                "f:component": {},
                                "f:host": {}
                            },
                            "f:type": {}
                        }
                    }
                ]
            },
            "involvedObject": {
                "kind": "Node",
                "name": "minikube",
                "uid": "minikube"
            },
            "reason": "Starting",
            "message": "Starting kubelet.",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-10-12T14:38:25Z",
            "lastTimestamp": "2020-10-12T14:38:25Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "minikube.163d458b117dbfd9",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/minikube.163d458b117dbfd9",
                "uid": "20e5ecbe-285f-4c1b-81be-a6019fb7e585",
                "resourceVersion": "354",
                "creationTimestamp": "2020-10-12T14:38:26Z",
                "managedFields": [
                    {
                        "manager": "kubelet",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-10-12T14:38:26Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:count": {},
                            "f:firstTimestamp": {},
                            "f:involvedObject": {
                                "f:kind": {},
                                "f:name": {},
                                "f:uid": {}
                            },
                            "f:lastTimestamp": {},
                            "f:message": {},
                            "f:reason": {},
                            "f:source": {
                                "f:component": {},
                                "f:host": {}
                            },
                            "f:type": {}
                        }
                    }
                ]
            },
            "involvedObject": {
                "kind": "Node",
                "name": "minikube",
                "uid": "minikube"
            },
            "reason": "NodeHasSufficientMemory",
            "message": "Node minikube status is now: NodeHasSufficientMemory",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-10-12T14:38:26Z",
            "lastTimestamp": "2020-10-12T14:38:26Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "minikube.163d458b117e2995",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/minikube.163d458b117e2995",
                "uid": "8acafb67-fd71-4560-8ad1-e9a8b742746a",
                "resourceVersion": "355",
                "creationTimestamp": "2020-10-12T14:38:26Z",
                "managedFields": [
                    {
                        "manager": "kubelet",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-10-12T14:38:26Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:count": {},
                            "f:firstTimestamp": {},
                            "f:involvedObject": {
                                "f:kind": {},
                                "f:name": {},
                                "f:uid": {}
                            },
                            "f:lastTimestamp": {},
                            "f:message": {},
                            "f:reason": {},
                            "f:source": {
                                "f:component": {},
                                "f:host": {}
                            },
                            "f:type": {}
                        }
                    }
                ]
            },
            "involvedObject": {
                "kind": "Node",
                "name": "minikube",
                "uid": "minikube"
            },
            "reason": "NodeHasNoDiskPressure",
            "message": "Node minikube status is now: NodeHasNoDiskPressure",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-10-12T14:38:26Z",
            "lastTimestamp": "2020-10-12T14:38:26Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "minikube.163d458b117e3a2c",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/minikube.163d458b117e3a2c",
                "uid": "ff7e19d7-74c6-4634-ad3c-25b90ee8f79a",
                "resourceVersion": "356",
                "creationTimestamp": "2020-10-12T14:38:26Z",
                "managedFields": [
                    {
                        "manager": "kubelet",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-10-12T14:38:26Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:count": {},
                            "f:firstTimestamp": {},
                            "f:involvedObject": {
                                "f:kind": {},
                                "f:name": {},
                                "f:uid": {}
                            },
                            "f:lastTimestamp": {},
                            "f:message": {},
                            "f:reason": {},
                            "f:source": {
                                "f:component": {},
                                "f:host": {}
                            },
                            "f:type": {}
                        }
                    }
                ]
            },
            "involvedObject": {
                "kind": "Node",
                "name": "minikube",
                "uid": "minikube"
            },
            "reason": "NodeHasSufficientPID",
            "message": "Node minikube status is now: NodeHasSufficientPID",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-10-12T14:38:26Z",
            "lastTimestamp": "2020-10-12T14:38:26Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "minikube.163d458b1dad483c",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/minikube.163d458b1dad483c",
                "uid": "b2842d04-aabf-4d79-9287-1e535beea835",
                "resourceVersion": "359",
                "creationTimestamp": "2020-10-12T14:38:26Z",
                "managedFields": [
                    {
                        "manager": "kubelet",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-10-12T14:38:26Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:count": {},
                            "f:firstTimestamp": {},
                            "f:involvedObject": {
                                "f:kind": {},
                                "f:name": {},
                                "f:uid": {}
                            },
                            "f:lastTimestamp": {},
                            "f:message": {},
                            "f:reason": {},
                            "f:source": {
                                "f:component": {},
                                "f:host": {}
                            },
                            "f:type": {}
                        }
                    }
                ]
            },
            "involvedObject": {
                "kind": "Node",
                "name": "minikube",
                "uid": "minikube"
            },
            "reason": "NodeAllocatableEnforced",
            "message": "Updated Node Allocatable limit across pods",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-10-12T14:38:26Z",
            "lastTimestamp": "2020-10-12T14:38:26Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "minikube.163d458b9e2cd39b",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/minikube.163d458b9e2cd39b",
                "uid": "3879f5c8-7f2e-47be-b41e-251273604db4",
                "resourceVersion": "372",
                "creationTimestamp": "2020-10-12T14:38:28Z",
                "managedFields": [
                    {
                        "manager": "kube-proxy",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-10-12T14:38:28Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:count": {},
                            "f:firstTimestamp": {},
                            "f:involvedObject": {
                                "f:kind": {},
                                "f:name": {},
                                "f:uid": {}
                            },
                            "f:lastTimestamp": {},
                            "f:message": {},
                            "f:reason": {},
                            "f:source": {
                                "f:component": {},
                                "f:host": {}
                            },
                            "f:type": {}
                        }
                    }
                ]
            },
            "involvedObject": {
                "kind": "Node",
                "name": "minikube",
                "uid": "minikube"
            },
            "reason": "readOnlySysFS",
            "message": "CRI error: /sys is read-only: cannot modify conntrack limits, problems may arise later (If running Docker, see docker issue #24000)",
            "source": {
                "component": "kube-proxy",
                "host": "minikube"
            },
            "firstTimestamp": "2020-10-12T14:38:28Z",
            "lastTimestamp": "2020-10-12T14:38:28Z",
            "count": 1,
            "type": "Warning",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "minikube.163d458b9e7985b0",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/minikube.163d458b9e7985b0",
                "uid": "ef7ff3a3-e11a-41ac-989a-e3792e25e56f",
                "resourceVersion": "373",
                "creationTimestamp": "2020-10-12T14:38:28Z",
                "managedFields": [
                    {
                        "manager": "kube-proxy",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-10-12T14:38:28Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:count": {},
                            "f:firstTimestamp": {},
                            "f:involvedObject": {
                                "f:kind": {},
                                "f:name": {},
                                "f:uid": {}
                            },
                            "f:lastTimestamp": {},
                            "f:message": {},
                            "f:reason": {},
                            "f:source": {
                                "f:component": {},
                                "f:host": {}
                            },
                            "f:type": {}
                        }
                    }
                ]
            },
            "involvedObject": {
                "kind": "Node",
                "name": "minikube",
                "uid": "minikube"
            },
            "reason": "Starting",
            "message": "Starting kube-proxy.",
            "source": {
                "component": "kube-proxy",
                "host": "minikube"
            },
            "firstTimestamp": "2020-10-12T14:38:28Z",
            "lastTimestamp": "2020-10-12T14:38:28Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "minikube.163d458d6d89dda4",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/minikube.163d458d6d89dda4",
                "uid": "65b0c21a-7915-412d-808a-7765eaa50c55",
                "resourceVersion": "382",
                "creationTimestamp": "2020-10-12T14:38:36Z",
                "managedFields": [
                    {
                        "manager": "kubelet",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-10-12T14:38:36Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:count": {},
                            "f:firstTimestamp": {},
                            "f:involvedObject": {
                                "f:kind": {},
                                "f:name": {},
                                "f:uid": {}
                            },
                            "f:lastTimestamp": {},
                            "f:message": {},
                            "f:reason": {},
                            "f:source": {
                                "f:component": {},
                                "f:host": {}
                            },
                            "f:type": {}
                        }
                    }
                ]
            },
            "involvedObject": {
                "kind": "Node",
                "name": "minikube",
                "uid": "minikube"
            },
            "reason": "NodeReady",
            "message": "Node minikube status is now: NodeReady",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2020-10-12T14:38:36Z",
            "lastTimestamp": "2020-10-12T14:38:36Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        }
    ]
}
{
    "kind": "ReplicationControllerList",
    "apiVersion": "v1",
    "metadata": {
        "selfLink": "/api/v1/namespaces/default/replicationcontrollers",
        "resourceVersion": "958"
    },
    "items": []
}
{
    "kind": "ServiceList",
    "apiVersion": "v1",
    "metadata": {
        "selfLink": "/api/v1/namespaces/default/services",
        "resourceVersion": "958"
    },
    "items": [
        {
            "metadata": {
                "name": "kubernetes",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/services/kubernetes",
                "uid": "3a265386-2831-4e9b-a71a-816156d23b04",
                "resourceVersion": "158",
                "creationTimestamp": "2020-10-12T14:38:17Z",
                "labels": {
                    "component": "apiserver",
                    "provider": "kubernetes"
                },
                "managedFields": [
                    {
                        "manager": "kube-apiserver",
                        "operation": "Update",
                        "apiVersion": "v1",
                        "time": "2020-10-12T14:38:17Z",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:labels": {
                                    ".": {},
                                    "f:component": {},
                                    "f:provider": {}
                                }
                            },
                            "f:spec": {
                                "f:clusterIP": {},
                                "f:ports": {
                                    ".": {},
                                    "k:{\"port\":443,\"protocol\":\"TCP\"}": {
                                        ".": {},
                                        "f:name": {},
                                        "f:port": {},
                                        "f:protocol": {},
                                        "f:targetPort": {}
                                    }
                                },
                                "f:sessionAffinity": {},
                                "f:type": {}
                            }
                        }
                    }
                ]
            },
            "spec": {
                "ports": [
                    {
                        "name": "https",
                        "protocol": "TCP",
                        "port": 443,
                        "targetPort": 8443
                    }
                ],
                "clusterIP": "10.96.0.1",
                "type": "ClusterIP",
                "sessionAffinity": "None"
            },
            "status": {
                "loadBalancer": {}
            }
        }
    ]
}
{
    "kind": "DaemonSetList",
    "apiVersion": "apps/v1",
    "metadata": {
        "selfLink": "/apis/apps/v1/namespaces/default/daemonsets",
        "resourceVersion": "958"
    },
    "items": []
}
{
    "kind": "DeploymentList",
    "apiVersion": "apps/v1",
    "metadata": {
        "selfLink": "/apis/apps/v1/namespaces/default/deployments",
        "resourceVersion": "958"
    },
    "items": []
}
{
    "kind": "ReplicaSetList",
    "apiVersion": "apps/v1",
    "metadata": {
        "selfLink": "/apis/apps/v1/namespaces/default/replicasets",
        "resourceVersion": "958"
    },
    "items": []
}
{
    "kind": "PodList",
    "apiVersion": "v1",
    "metadata": {
        "selfLink": "/api/v1/namespaces/default/pods",
        "resourceVersion": "958"
    },
    "items": []
}
